
# The environments element contains an array of
# environments. All environments in all imported
# bosun files are merged.
environments:
  # The Name of the environment.
- name: blue
  # The k8s cluster the environment targets
  cluster: minikube
  # The domain the cluster's load balancers are listening on.
  domain: n5o.red
  # Whether this is a minikube local environment.
  isLocal: true
  # Commands are the commands which will be executed when
  # this environment is made active.
  commands:
      # The name of the command, for logging.
    - name: minikube
      # The exec node is a DynamicCommand.
      # See ./docs/DynamicValue for details.
      exec: kubectl config use-context minikube
  # Variables are env vars which will be set within the bosun process
  # when the environment is active, and will be emitted in the set script
  # when you invoke `bosun env {name}`.
  variables:
    # The env var to set
  - name: AWS_DEFAULT_PROFILE
    # The from element is a DynamicValue.
    # See ./docs/DynamicValue for details.
    from: red
  # Scripts are scripts which can be executed using `bosun scripts {name}` when
  # this environment is active.
  scripts:
      # The name of the script. This is a literal script which executes a shell command.
    - name: microservices-up
      # This is an implicit element which is automatically populated
      # with the absolute path to the file containing this script.
      fromPath:
      # The description of the script, for documentation.
      description: Deploys all known microservices to minikube.
      # Literal is a DynamicCommand (./docs/DynamicValue).
      literal: bosun apps deploy --labels=microservice --force
    - name: up
      description: |
        This script brings up the minikube cluster, installs the infrastructure components needed locally,
        and installs all the registered microservices. It's safe to run this multiple times. If a step fails,
        wait for a minute and try again, as sometimes dependencies are slow to come up.
      # Steps is an array of steps in this script.
      # Each step is either a bosun command or a literal command.
      steps:
          # The bosun command to execute.
        - command: minikube
          # The arguments to pass to the command.
          args:
            - up
          # A map containing the flags to set for the command.
          # Any global flags that are set when `bosun script {name}` is run
          # will be passed to the scripted command.
          flags: {}
          # This script is a literal script, a DynamicCommand.
          # Flags set on `bosun script {name}` will not be passed to it.
        - literal: bosun kube pull-secret
# A map of known apps to the repos they can be found in.
# This should be in a bosun file in the devops repo.
appRefs:
  auth:
    repo: naveegoinc/auth
# Apps are configurations for releasable services
# which have a chart and/or code in the same repo
# as the the apps entry which holds their configuration.
# All apps elements from all imported bosun files are
# merged into one array when bosun is loaded.
apps:

  # The name of the app. This is an app defined in the devops repo.
- name: mongodb
  # This is an implicit element which is automatically populated
  # with the absolute path to the file containing this app.
  fromPath:
    # The namespace the app is deployed to. Defaults to "default" if not provided.
  namespace: default
  # The version of the app. This should only be modified using 
  # the `bosun app bump {name}` command, which will also update
  # the helm chart version and the package.json version (if present).
  version: 3.5.3
  # The path to the chart for this app, relative to the fromPath for this app.
  chartPath: ../../charts/mongodb
  # Labels for this app. Labels can be used with `bosun apps {command}` commands
  # to select the apps the command should apply to.
  labels:
  - infrastructure
  # The values which shall be passed to helm and to other
  # commands or templates when the app is released,
  # or its scripts or commands are run. This element is a map.
  # The keys are comma-delimited lists (without spaces) of the environments the values should be available in.
  # The values are maps with one or more of three optional elements: dynamic, static, and files.
  # The values available for a command or release will be extracted based
  # on the current environment, then merged based on key specificity. Values
  # under a key with one environment will overwrite values under a key with two environments,
  # which will overwrite values under a key with three environments and so on.
  # After environments are merged, the order of precedence (from lowest to highest) is:
  # 1. Values from the values.yaml file in the chart
  # 2. Values from `files`
  # 3. Values from `static`
  # 4. Values from `dynamic`
  # 5. Values passed to the `--set` flag of the command being executed.
  values:
    green,blue:
      # The `dynamic` element is a map.
      # The keys in the map are . delimited paths which should be populated in the values map.
      # The values are DynamicValues which shall be resolved lazily.
      dynamic:
        auth.adminPassword: |
          bosun vault secret naveego-secrets/mongodb/default/admin-password password --generate
    red:
      # The `static` element is a normal yaml map element which will
      # be merged into the
      static:
        auth:
          adminPassword: root
          key: 2c7eeaf2cb5d4f8592f37fa23fe503ad
          metricsPassword: root
          metricsUser: metricsuser
    red,green,blue:
      files:
      - ./shared/mongodb.yaml
      - ./$BOSUN_ENVIRONMENT/mongodb.yaml
      static: {}
  actions:
  - name: Configure vault/mongo integration
    when: AfterDeploy
    where: red,green
    maxAttempts: 10
    timeout: 5s
    interval: 15s
    vault:
      file: ./vault/mongodb.after.yaml
- name: elasticsearch
  namespace: default
  version: 1.15.1
  chartPath: ../../charts/elasticsearch
  labels:
  - infrastructure
  values:
    blue:
      set:
        serviceDomain: n5o.blue
      static: {}
    green:
      set:
        serviceDomain: n5o.green
      static: {}
    red:
      set:
        metrics.enabled: "false"
        serviceDomain: n5o.red
      static: {}
    red,green,blue:
      set:
        image.tag: 5.6.14
      files:
      - ./shared/elasticsearch.yaml
      - ./$BOSUN_ENVIRONMENT/elasticsearch.yaml
      static: {}
- name: kafka
  namespace: default
  version: 0.8.7
  chartPath: ../../charts/kafka
  dependsOn:
  - name: zookeeper
  labels:
  - infrastructure
  values:
    blue:
      dynamic:
        manager.auth.htpasswd: |
          kafkaManagerPassword=$(bosun lastpass password Shared-Blue/blue-kafka-admin admin https://kafka.n5o.blue)
          defaultPassword=$(htpasswd -nb admin $kafkaManagerPassword)
          bosun vault secret naveego-secrets/kafka/password-secret htpasswd --default $defaultPassword | base64
        manager.auth.secretName: kafka-manager-auth
      static: {}
    green:
      dynamic:
        manager.auth.htpasswd: "# generate or get the password from lastpass\nkafkaManagerPassword=$(bosun
          lastpass password Shared-Green/green-kafka-admin admin https://kafka.n5o.green)\n#
          hash the password \ndefaultPassword=$(htpasswd -nb admin $kafkaManagerPassword)\n#
          Get the hashed password from vault\n# If vault doesn't know the hashed password,
          it will be set and returned\n# The hashed password is stored in vault so
          that we don't change the hashed password\n# on every deploy (htpasswd uses
          a different salt each time, so if we didn't cache \n# the hashed password
          in vault, the chart would appear to be changing every time this is run).\nbosun
          vault secret naveego-secrets/kafka/password-secret htpasswd --default $defaultPassword
          | base64\n"
        manager.auth.secretName: kafka-manager-auth
      static: {}
    red,green,blue:
      files:
      - ./shared/kafka.yaml
      - ./$BOSUN_ENVIRONMENT/kafka.yaml
      static: {}
- name: zookeeper
  namespace: default
  version: 1.1.2
  chartPath: ../../charts/zookeeper
  labels:
  - infrastructure
  values:
    red,green,blue:
      set:
        image.name: docker.n5o.black/public/zookeeper
        image.tag: latest
      files:
      - ./shared/zookeeper.yaml
      - ./$BOSUN_ENVIRONMENT/zookeeper.yaml
      static: {}
- name: nats
  namespace: default
  version: 0.0.6
  chartPath: ../../charts/nats
  labels:
  - infrastructure
  values:
    blue:
      set:
        chadburn.keyDiscoveryURL: https://auth.n5o.blue/discovery/keys
      static: {}
    red,green:
      set:
        chadburn.keyDiscoveryURL: http://auth/discovery/keys
      static: {}
    red,green,blue:
      files:
      - ./shared/nats.yaml
      - ./$BOSUN_ENVIRONMENT/nats.yaml
      static: {}
- name: redis
  namespace: default
  version: 3.0.4
  chartPath: ../../charts/redis
  labels:
  - infrastructure
  values:
    red:
      static:
        metrics:
          enabled: false
        persistentVolume:
          enabled: false
        replicas: 1
        sentinal:
          quorum: 1
    red,green,blue:
      static:
        auth: false
        redis:
          masterGroupName: naveego
- name: spark
  namespace: default
  version: 0.2.8
  chartPath: ../../charts/spark
  dependsOn:
  - name: redis
  - name: cassandra
  labels:
  - infrastructure
  values:
    blue:
      set:
        domain: n5o.blue
      static: {}
    green:
      set:
        domain: n5o.green
      static: {}
    red:
      set:
        domain: n5o.red
      static: {}
    red,green,blue:
      set:
        Master.Image: docker.n5o.black/public/spark
        Master.ImageTag: 2.3.1
        Worker.Image: docker.n5o.black/public/spark
        Worker.ImageTag: 2.3.1
      static: {}
- name: cassandra
  namespace: default
  version: 0.5.3
  chartPath: ../../charts/cassandra
  labels:
  - infrastructure
  values:
    red,green,blue:
      files:
      - ./shared/cassandra.yaml
      - ./$BOSUN_ENVIRONMENT/cassandra.yaml
      static: {}
- name: vault
  namespace: default
  version: 1.1.1
  chartPath: ../../charts/vault
  dependsOn:
  - name: traefik
  values:
    blue:
      static:
        features:
          devInstance: false
    red,green:
      static:
        features:
          devInstance: true
        image:
          name: docker.n5o.black/public/vault-dev-jose
          tag: latest
        storage: 256Mi
    red,green,blue:
      static:
        features:
          serviceAccount: true
  actions:
  - name: Test deploy
    when: AfterDeploy
    where: red,green
    maxAttempts: 5
    timeout: 5s
    interval: 5s
    test:
      http: https://vault.{{.Domain}}
  - name: Bootstrap vault
    when: AfterDeploy
    where: red,green
    exec: bosun vault bootstrap-dev
  - name: Configure vault/kube integration
    when: AfterDeploy
    vault:
      file: ./vault/vault.after.yaml
- name: metabase
  branchForRelease: true
  reportDeployment: true
  repo: naveegoinc/metabase
  version: 0.4.0
  chartPath: deploy/charts/metabase
  dependsOn:
  - name: mongodb
    repo: naveegoinc/devops
  - name: vault
    repo: naveegoinc/devops
  - name: nats
    repo: naveegoinc/devops
  - name: kafka
    repo: naveegoinc/devops
  labels:
  - microservice
  minikube:
    routableServices:
    - name: metabase
      portName: http
      externalPort: 0
      localhostPort: 5000
  values:
    blue:
      set:
        domain: n5o.blue
        mongodb: mongodb://(vault:naveego-secrets/mongodb/metabase?template={{.username}}:{{.password}})@mongo1.n5o.blue:27017,mongo2.n5o.blue:27017,mongo3.n5o.blue:27017/?replicaSet=naveego&readPreference=primary&authSource=admin
        tag: 0.3.2-2018.2.1
        vault: https://vault.n5o.blue
      static: {}
    green:
      set:
        domain: n5o.green
      static: {}
    red:
      set:
        domain: n5o.red
      static: {}
    red,green,blue:
      set:
        aspnet.env: Production
        nats: nats://nats-nats-client:4222
      static: {}
  scripts:
  - name: build-image
    fromPath: /home/steve/go/src/github.com/naveegoinc/metabase/bosun.yaml
    literal: docker build --tag docker.n5o.black/private/metabase:latest --build-arg
      VERSION=$BOSUN_APP_VERSION -f Dockerfile .
  - name: env
    fromPath: /home/steve/go/src/github.com/naveegoinc/metabase/bosun.yaml
    literal: env
  actions:
  - name: Vault setup
    when: BeforeDeploy
    vault:
      layout:
        auth: {}
        mounts: {}
        resources:
          /auth/approle/role/metabase:
            allowed_custom_claims: []
            aud: naveego
            claims:
              role: metabase
              tid: naveego
            key_set: default
            type: jwt
          /auth/kubernetes/role/metabase:
            bound_service_account_names:
            - metabase
            - devops
            bound_service_account_namespaces: '*'
            period: 60m
            policies: metabase
          /database/roles/mongodb-metabase:
            creation_statements: |
              {
                  "db": "admin",
                  "roles": [
                      {
                          "role": "readWriteAnyDatabase",
                          "db": "admin"
                      }
                  ]
              }
            db_name: mongodb
            default_ttl: 1h
        policies:
          metabase:
            path:
              auth/token/lookup-self:
                capabilities:
                - read
              database/creds/mongodb-metabase:
                capabilities:
                - read
              naveego-secrets/mongodb/metabase:
                capabilities:
                - read
                comment: Temporary location of mongodb credentials until VPC peering
                  is configured.
- name: dataflow-ui
  branchForRelease: true
  reportDeployment: true
  repo: naveegoinc/frontends
  version: 0.2.1
  chartPath: deploy/charts/dataflow-ui
  runCommand:
  - npm
  - run
  - dev
  labels:
  - microservice
  minikube:
    routableServices:
    - name: dataflow-ui
      portName: http
      externalPort: 3000
      localhostPort: 0
  values:
    blue:
      static: {}
    green:
      static: {}
    red:
      static: {}
    red,green,blue:
      set:
        replicas: "1"
      static: {}
- name: mdm-ui
  branchForRelease: true
  reportDeployment: true
  repo: naveegoinc/frontends
  version: 0.2.1
  chartPath: deploy/charts/mdm-ui
  runCommand:
  - npm
  - run
  - dev
  labels:
  - microservice
  minikube:
    routableServices:
    - name: dataflow-ui
      portName: http
      externalPort: 3000
      localhostPort: 0
  values:
    blue:
      set:
        elastic.issuerUrl: https://auth.n5o.blue
      static: {}
    red,green:
      set:
        elastic.issuerUrl: http://auth
      static: {}
- name: bosun
  version: 0.2.0
  scripts:
  - name: publish
    fromPath: /home/steve/src/github.com/naveego/bosun/bosun.yaml
    steps:
    - command: ""
      args: []
      flags: {}
      literal:
      - mage
      - -v
      - publish
- name: dataflow-server
  branchForRelease: true
  reportDeployment: true
  repo: naveegoinc/dataflow
  version: 0.1.0
  chartPath: ../deploy/charts/dataflow-server
  runCommand:
  - dotnet
  - server/DataFlow.Server/bin/Debug/netcoreapp2.1/Dataflow.Server.dll
  values:
    green,blue:
      set:
        aspnet.env: Production
      static: {}
    red,green,blue:
      files:
      - ../deploy/charts/dataflow-server/files/$BOSUN_DOMAIN.tenants.yaml
      static: {}
- name: dataflow-api
  branchForRelease: true
  reportDeployment: true
  repo: naveegoinc/dataflow
  version: 0.1.0
  chartPath: ../deploy/charts/dataflow-api
  runCommand:
  - dotnet
  - api/DataFlow.Api/bin/Debug/netcoreapp2.1/DataFlow.Api.dll
  values:
    blue:
      set:
        auth.keyDiscoveryPort: https://auth.n5o.blue/discovery/keys
      static: {}
    green,blue:
      set:
        aspnet.env: Production
      static: {}
    red,green:
      set:
        auth.keyDiscoveryPort: http://auth/discovery/keys
      static: {}
    red,green,blue:
      files:
      - ../deploy/charts/dataflow-api/files/$BOSUN_DOMAIN.tenants.yaml
      static: {}
- name: auth
  branchForRelease: true
  reportDeployment: true
  repo: naveegoinc/auth
  version: 0.9.1
  chartPath: deploy/charts/auth
  dependsOn:
  - name: mongodb
    repo: naveegoinc/devops
  - name: vault
    repo: naveegoinc/devops
  - name: traefik
    repo: naveegoinc/devops
  labels:
  - microservice
  values:
    blue:
      set:
        domain: n5o.blue
        service.host: auth.n5o.blue
        storage: dynamodb://us-east-1
        vault.address: https://vault.n5o.blue
      static: {}
    green:
      set:
        domain: n5o.green
        service.host: auth.n5o.green
      static: {}
    red:
      set:
        docker.pullPolicy: IfNotPresent
        domain: n5o.red
        service.host: auth.n5o.red
      static: {}
    red,green:
      set:
        storage: mongodb://(vault:database/creds/mongodb-auth?template={{.username}}:{{.password}})@mongodb:27017/auth
        vault.address: http://vault
      static: {}
  scripts:
  - name: buildImage
    fromPath: /home/steve/go/src/github.com/naveegoinc/auth/bosun.yaml
    literal: docker build --tag docker.n5o.black/private/auth .
  actions:
  - name: Vault setup
    when: BeforeDeploy
    vault:
      file: ./deploy/charts/auth/files/vault.yaml
- name: go-between
  branchForRelease: true
  reportDeployment: true
  repo: naveegoinc/go-between
  version: 0.6.0
  chartPath: deploy/charts/go-between
  dependsOn:
  - name: mongodb
    repo: naveegoinc/devops
  - name: vault
    repo: naveegoinc/devops
  - name: nats
    repo: naveegoinc/devops
  - name: kafka
    repo: naveegoinc/devops
  labels:
  - microservice
  minikube:
    routableServices:
    - name: go-between-hub
      portName: http
      externalPort: 8081
      localhostPort: 0
  values:
    blue:
      set:
        mongodb: mongodb://(vault://naveego-secrets/mongodb/go-between?template={{.username}}:{{.password}})@mongodb:27017/go-between?authSource=admin
      static: {}
    green:
      set:
        mongodb: mongodb://(vault://database/creds/mongodb-go-between?template={{.username}}:{{.password}})@mongodb:27017/go-between?readPreference=primary
      static: {}
    red:
      set:
        mongodb: mongodb://(vault://database/creds/mongodb-go-between?template={{.username}}:{{.password}})@mongodb:27017/go-between?readPreference=primary
      static: {}
  scripts:
  - name: up-ci
    fromPath: /home/steve/go/src/github.com/naveegoinc/go-between/bosun.yaml
    steps:
    - command: minikube
      args:
      - up
      flags:
        driver: none
    - command: helm
      args:
      - init
      flags: {}
    - command: ""
      args: []
      flags: {}
      literal: bosun apps add-hosts --all | sudo tee /etc/hosts
    - command: kube
      args:
      - pull-secret
      flags: {}
    - command: apps
      args:
      - deploy
      - minikube-cluster
      flags: {}
    - command: apps
      args:
      - deploy
      - traefik
      - vault
      flags: {}
    - command: vault
      args:
      - bootstrap-dev
      flags: {}
    - command: vault
      args:
      - ./vault/vault.yaml
      - ./vault/kube.yaml
      flags: {}
    - command: apps
      args:
      - deploy
      - nats
      - mongodb
      - zookeeper
      - kafka
      - cassandra
      - auth
      flags: {}
  actions:
  - name: Vault setup
    when: BeforeDeploy
    vault:
      layout:
        auth: {}
        mounts: {}
        resources:
          /auth/approle/role/go-between-hub:
            comment: The approle for the hub to use when authenticating with a wrapped
              token.
            period: 60m
            policies:
            - default
            - go-between-hub
          /auth/kubernetes/role/go-between-hub:
            bound_service_account_names: go-between-hub
            bound_service_account_namespaces: '*'
            period: 60m
            policies: go-between-hub
          /auth/kubernetes/role/go-between-ingestion:
            bound_service_account_names: go-between-ingestion
            bound_service_account_namespaces: '*'
            period: 60m
            policies: default
          /database/roles/mongodb-go-between:
            creation_statements: |
              {
                "db": "go-between",
                "roles": [
                  {
                    "role": "readWrite",
                    "db": "go-between"
                  }
                ]
              }
            db_name: mongodb
            default_ttl: 1h
          /jose/roles/tenant-agent-naveego:
            allowed_custom_claims:
            - sub
            aud: naveego
            claims:
              role: go-between-hub
              tid: naveego
            comment: JOSE role for the hub to create JWT tokens for itself.
            key_set: auth
            type: jwt
        policies:
          go-between-hub: |
            path "database/creds/mongodb-go-between" {
              capabilities = ["read"]
            }

            path "naveego-secrets/mongodb/go-between" {
              capabilities = ["read"]
            }

            path "auth/token/lookup-self" {
              capabilities = ["read"]
            }

            path "tenant-secrets/*" {
              capabilities = [ "create", "update", "delete" ]
            }

            path "auth/approle/role/tenant-agent-*" {
              capabilities = ["create","update","read"]
              allowed_parameters = {
                "policies" = [["go-between-tenant-agent"]]
                "period" = []
              }
            }

            path "jose/roles/tenant-agent-*" {
              capabilities = ["create","update","read"]
            }

            path "jose/jwt/issue/tenant-agent-naveego" {
              capabilities = ["create","update","read"]
            }

            path "jose/jwt/issue/go-between-hub" {
              capabilities = ["create","update","read"]
            }

            // Search for entities
            path "identity/lookup/entity" {
              capabilities = ["create","update"]
            }

            path "identity/entity" {
              capabilities = ["create","update","read"]
              allowed_parameters = {
                "name" = []
                "metadata" = []
                "policies" = [["go-between-tenant-agent"]]
              }
            }

            path "identity/entity-alias" {
              capabilities = ["create","update","read"]
              allowed_parameters = {
                "name" = []
                "canonical_id" = []
                "metadata" = []
                "mount_accessor" = []
              }
            }

            // Get the credentials for using S3.
            path "aws/creds/s3-navget" {
              capabilities = ["read"]
            }

            // Ability to list auth systems, so hub can find the mount accessor for
            // the approle auth method and create entity aliases against it.
            path "sys/auth" {
              capabilities =["read"]
            }
          go-between-tenant-agent: |
            path "tenant-secrets/{{`{{`}}identity.entity.metadata.tid}}/*" {
              capabilities = [ "create", "update", "delete", "read"]
            }

            path "tenant-secrets/agent/{{`{{`}}identity.entity.name}}/*" {
              capabilities = [ "create", "update", "delete","read"]
            }

            path "jose/jwt/issue/tenant-agent-{{`{{`}}identity.entity.metadata.tid}}" {
              capabilities = ["create","update","read"]
            }

            path "auth/token/lookup-self" {
              capabilities = [ "read"]
            }
fromPath: ""
releases:
- name: 2018.2.1
  fromPath: /home/steve/src/github.com/naveegoinc/devops/releases/2018.2.1.yaml
  apps:
    dataflow-api:
      name: dataflow-api
      namespace: ""
      repo: naveegoinc/dataflow
      branch: release/2018.2.1
      commit: 17c236f
      version: 0.1.0
      syncedAt: 2018-12-31T12:37:23.291969378-05:00
      chart: helm.n5o.black/dataflow-api
      image: docker.n5o.black/private/dataflow-api
      imageTag: 0.1.0-2018.2.1
      reportDeployment: true
      dependsOn: []
      actions: []
      values:
        blue:
          dynamic:
            aspnet.env: Production
            auth.keyDiscoveryPort: https://auth.n5o.blue/discovery/keys
          static:
            aspnet:
              env: Development
            auth:
              keyDiscoveryPort: http://auth.n5o.green/discovery/keys
            cassandra:
              defaultKeyspace: n5o_default
              hosts:
              - cassandra
              password: cassandra
              port: 9042
              serviceApiKey: "12345"
              tenants:
              - id: uat1
                name: uat1
                scale: 2
              timeoutInMilliseconds: 60000
              username: cassandra
            domain: n5o.green
            imagePullPolicy: Always
            logging:
              level: Debug
            nats: nats://nats:4222
            replicaCount: 1
            routeToHost: false;
            service:
              port: 80
              type: ExternalName
            tag: latest
        green:
          dynamic:
            aspnet.env: Production
            auth.keyDiscoveryPort: http://auth/discovery/keys
          static:
            aspnet:
              env: Development
            auth:
              keyDiscoveryPort: http://auth.n5o.green/discovery/keys
            cassandra:
              defaultKeyspace: n5o_default
              hosts:
              - cassandra
              password: cassandra
              port: 9042
              serviceApiKey: "12345"
              tenants:
              - id: vandelay
                name: vandelay
                scale: 2
              timeoutInMilliseconds: 60000
              username: cassandra
            domain: n5o.green
            imagePullPolicy: Always
            logging:
              level: Debug
            nats: nats://nats:4222
            replicaCount: 1
            routeToHost: false;
            service:
              port: 80
              type: ExternalName
            tag: latest
        red:
          dynamic:
            auth.keyDiscoveryPort: http://auth/discovery/keys
          static:
            aspnet:
              env: Development
            auth:
              keyDiscoveryPort: http://auth.n5o.green/discovery/keys
            cassandra:
              defaultKeyspace: n5o_default
              hosts:
              - cassandra
              password: cassandra
              port: 9042
              serviceApiKey: "12345"
              tenants:
              - id: vandelay
                name: vandelay
                scale: 2
              - id: testa1
                name: A
                scale: 2
              - id: testb2
                name: B
                scale: 3
              - id: testc3
                name: C
                scale: 4
              - id: testd4
                name: D
                scale: 4
              timeoutInMilliseconds: 60000
              username: cassandra
            domain: n5o.green
            imagePullPolicy: Always
            logging:
              level: Debug
            nats: nats://nats:4222
            replicaCount: 1
            routeToHost: false;
            service:
              port: 80
              type: ExternalName
            tag: latest
      valueOverrides: {}
    dataflow-server:
      name: dataflow-server
      namespace: ""
      repo: naveegoinc/dataflow
      branch: release/2018.2.1
      commit: 17c236f
      version: 0.1.0
      syncedAt: 2018-12-31T12:37:19.520615513-05:00
      chart: helm.n5o.black/dataflow-server
      image: docker.n5o.black/private/dataflow-server
      imageTag: 0.1.0-2018.2.1
      reportDeployment: true
      dependsOn: []
      actions: []
      values:
        blue:
          dynamic:
            aspnet.env: Production
          static:
            aspnet:
              env: Development
            cassandra:
              defaultKeyspace: n5o_default
              hosts:
              - cassandra
              password: cassandra
              port: 9042
              serviceApiKey: "12345"
              tenants:
              - id: uat1
                name: uat1
                scale: 2
              timeoutInMilliseconds: 60000
              username: cassandra
            domain: n5o.green
            imagePullPolicy: Always
            kafka:
              consumerConfig:
                bootstrapServers: kafka:9092
                enableAutoCommit: false
                groupId: dataflow-server
                sessionTimeoutMs: 60000
                statisticsIntervalMs: 5000
              streams:
              - scale: 1
                value: metabase.shapes.changes
              - scale: 1
                value: matching.groups
              - scale: 1
                value: mdm.compositerecords
              - scale: 1
                value: go-between.ingestion
              tenants:
              - id: uat1
                name: uat1
                scale: 2
            logging:
              level: Debug
            nats: nats://nats:4222
            replicaCount: 1
            routeToHost: false;
            service:
              port: 5000
              type: ExternalName
            tag: latest
        green:
          dynamic:
            aspnet.env: Production
          static:
            aspnet:
              env: Development
            cassandra:
              defaultKeyspace: n5o_default
              hosts:
              - cassandra
              password: cassandra
              port: 9042
              serviceApiKey: "12345"
              tenants:
              - id: vandelay
                name: vandelay
                scale: 2
              timeoutInMilliseconds: 60000
              username: cassandra
            domain: n5o.green
            imagePullPolicy: Always
            kafka:
              consumerConfig:
                bootstrapServers: kafka:9092
                enableAutoCommit: false
                groupId: dataflow-server
                sessionTimeoutMs: 60000
                statisticsIntervalMs: 5000
              streams:
              - scale: 1
                value: metabase.shapes.changes
              - scale: 1
                value: matching.groups
              - scale: 1
                value: mdm.compositerecords
              - scale: 1
                value: go-between.ingestion
              tenants:
              - id: vandelay
                name: vandelay
                scale: 2
            logging:
              level: Debug
            nats: nats://nats:4222
            replicaCount: 1
            routeToHost: false;
            service:
              port: 5000
              type: ExternalName
            tag: latest
        red:
          static:
            aspnet:
              env: Development
            cassandra:
              defaultKeyspace: n5o_default
              hosts:
              - cassandra
              password: cassandra
              port: 9042
              serviceApiKey: "12345"
              tenants:
              - id: vandelay
                name: vandelay
                scale: 2
              - id: testa1
                name: A
                scale: 2
              - id: testb2
                name: B
                scale: 3
              - id: testc3
                name: C
                scale: 4
              - id: testd4
                name: D
                scale: 4
              timeoutInMilliseconds: 60000
              username: cassandra
            domain: n5o.green
            imagePullPolicy: Always
            kafka:
              consumerConfig:
                bootstrapServers: kafka:9092
                enableAutoCommit: false
                groupId: dataflow-server
                sessionTimeoutMs: 60000
                statisticsIntervalMs: 5000
              streams:
              - scale: 1
                value: metabase.shapes.changes
              - scale: 1
                value: matching.groups
              - scale: 1
                value: mdm.compositerecords
              - scale: 1
                value: go-between.ingestion
              tenants:
              - id: vandelay
                name: vandelay
                scale: 2
              - id: testa1
                name: A
                scale: 2
              - id: testb2
                name: B
                scale: 3
              - id: testc3
                name: C
                scale: 4
              - id: testd4
                name: D
                scale: 4
            logging:
              level: Debug
            nats: nats://nats:4222
            replicaCount: 1
            routeToHost: false;
            service:
              port: 5000
              type: ExternalName
            tag: latest
      valueOverrides: {}
    dataflow-ui:
      name: dataflow-ui
      namespace: ""
      repo: naveegoinc/frontends
      branch: release/2018.2.1
      commit: 5927a5f
      version: 0.2.1
      syncedAt: 2018-12-31T15:36:03.322023589-05:00
      chart: helm.n5o.black/dataflow-ui
      image: docker.n5o.black/private/dataflow-ui
      imageTag: 0.2.1-2018.2.1
      reportDeployment: true
      dependsOn: []
      actions: []
      values:
        blue:
          dynamic:
            replicas: "1"
          static:
            affinity: {}
            domain: n5o.red
            ingress:
              annotations:
                kubernetes.io/ingress.class: traefik
              enabled: true
              path: /
            name: dataflow-ui
            nodeSelector: {}
            pullSecret: docker-n5o-black
            resources: {}
            routeToHost: true
            service:
              port: 80
              type: ClusterIP
            tag: latest
            tolerations: []
        green:
          dynamic:
            replicas: "1"
          static:
            affinity: {}
            domain: n5o.red
            ingress:
              annotations:
                kubernetes.io/ingress.class: traefik
              enabled: true
              path: /
            name: dataflow-ui
            nodeSelector: {}
            pullSecret: docker-n5o-black
            resources: {}
            routeToHost: true
            service:
              port: 80
              type: ClusterIP
            tag: latest
            tolerations: []
        red:
          dynamic:
            replicas: "1"
          static:
            affinity: {}
            domain: n5o.red
            ingress:
              annotations:
                kubernetes.io/ingress.class: traefik
              enabled: true
              path: /
            name: dataflow-ui
            nodeSelector: {}
            pullSecret: docker-n5o-black
            resources: {}
            routeToHost: true
            service:
              port: 80
              type: ClusterIP
            tag: latest
            tolerations: []
      valueOverrides: {}
    go-between:
      name: go-between
      namespace: ""
      repo: naveegoinc/go-between
      branch: release/2018.2.1
      commit: db9ec1a
      version: 0.5.0
      syncedAt: 2018-12-31T15:59:56.655322442-05:00
      chart: helm.n5o.black/go-between
      image: docker.n5o.black/private/go-between
      imageTag: 0.5.0-2018.2.1
      reportDeployment: true
      dependsOn:
      - mongodb
      - vault
      - nats
      - kafka
      actions:
      - name: Vault setup
        when: BeforeDeploy
        vault:
          layout:
            auth: {}
            mounts: {}
            resources:
              /auth/approle/role/go-between-hub:
                comment: The approle for the hub to use when authenticating with a
                  wrapped token.
                period: 60m
                policies:
                - default
                - go-between-hub
              /auth/kubernetes/role/go-between-hub:
                bound_service_account_names: go-between-hub
                bound_service_account_namespaces: '*'
                period: 60m
                policies: go-between-hub
              /auth/kubernetes/role/go-between-ingestion:
                bound_service_account_names: go-between-ingestion
                bound_service_account_namespaces: '*'
                period: 60m
                policies: default
              /database/roles/mongodb-go-between:
                creation_statements: |
                  {
                    "db": "go-between",
                    "roles": [
                      {
                        "role": "readWrite",
                        "db": "go-between"
                      }
                    ]
                  }
                db_name: mongodb
                default_ttl: 1h
              /jose/roles/tenant-agent-naveego:
                allowed_custom_claims:
                - sub
                aud: naveego
                claims:
                  role: go-between-hub
                  tid: naveego
                comment: JOSE role for the hub to create JWT tokens for itself.
                key_set: auth
                type: jwt
            policies:
              go-between-hub: |
                path "database/creds/mongodb-go-between" {
                  capabilities = ["read"]
                }

                path "naveego-secrets/mongodb/go-between" {
                  capabilities = ["read"]
                }

                path "auth/token/lookup-self" {
                  capabilities = ["read"]
                }

                path "tenant-secrets/*" {
                  capabilities = [ "create", "update", "delete" ]
                }

                path "auth/approle/role/tenant-agent-*" {
                  capabilities = ["create","update","read"]
                  allowed_parameters = {
                    "policies" = [["go-between-tenant-agent"]]
                    "period" = []
                  }
                }

                path "jose/roles/tenant-agent-*" {
                  capabilities = ["create","update","read"]
                }

                path "jose/jwt/issue/tenant-agent-naveego" {
                  capabilities = ["create","update","read"]
                }

                path "jose/jwt/issue/go-between-hub" {
                  capabilities = ["create","update","read"]
                }

                // Search for entities
                path "identity/lookup/entity" {
                  capabilities = ["create","update"]
                }

                path "identity/entity" {
                  capabilities = ["create","update","read"]
                  allowed_parameters = {
                    "name" = []
                    "metadata" = []
                    "policies" = [["go-between-tenant-agent"]]
                  }
                }

                path "identity/entity-alias" {
                  capabilities = ["create","update","read"]
                  allowed_parameters = {
                    "name" = []
                    "canonical_id" = []
                    "metadata" = []
                    "mount_accessor" = []
                  }
                }

                // Get the credentials for using S3.
                path "aws/creds/s3-navget" {
                  capabilities = ["read"]
                }

                // Ability to list auth systems, so hub can find the mount accessor for
                // the approle auth method and create entity aliases against it.
                path "sys/auth" {
                  capabilities =["read"]
                }
              go-between-tenant-agent: |
                path "tenant-secrets/{{`{{`}}identity.entity.metadata.tid}}/*" {
                  capabilities = [ "create", "update", "delete", "read"]
                }

                path "tenant-secrets/agent/{{`{{`}}identity.entity.name}}/*" {
                  capabilities = [ "create", "update", "delete","read"]
                }

                path "jose/jwt/issue/tenant-agent-{{`{{`}}identity.entity.metadata.tid}}" {
                  capabilities = ["create","update","read"]
                }

                path "auth/token/lookup-self" {
                  capabilities = [ "read"]
                }
      values:
        blue:
          dynamic:
            mongodb: mongodb://(vault://naveego-secrets/mongodb/go-between?template={{.username}}:{{.password}})@mongodb:27017/go-between?authSource=admin
          static:
            domain: n5o.green
            kafka: kafka:9092
            mongodb: mongodb://(vault://database/creds/mongodb-go-between?template={{.username}}:{{.password}})@mongodb:27017/go-between?readPreference=primary
            nats: nats://nats-nats-client:4222
            replicaCount: 1
            routeToHost: false
            tag: 0.5.0
            vault: http://vault
        green:
          dynamic:
            mongodb: mongodb://(vault://database/creds/mongodb-go-between?template={{.username}}:{{.password}})@mongodb:27017/go-between?readPreference=primary
          static:
            domain: n5o.green
            kafka: kafka:9092
            mongodb: mongodb://(vault://database/creds/mongodb-go-between?template={{.username}}:{{.password}})@mongodb:27017/go-between?readPreference=primary
            nats: nats://nats-nats-client:4222
            replicaCount: 1
            routeToHost: false
            tag: 0.5.0
            vault: http://vault
        red:
          dynamic:
            mongodb: mongodb://(vault://naveego-secrets/mongodb/go-between?template={{.username}}:{{.password}})@mongodb:27017/go-between?authSource=admin
          static:
            domain: n5o.green
            kafka: kafka:9092
            mongodb: mongodb://(vault://database/creds/mongodb-go-between?template={{.username}}:{{.password}})@mongodb:27017/go-between?readPreference=primary
            nats: nats://nats-nats-client:4222
            replicaCount: 1
            routeToHost: false
            tag: 0.5.0
            vault: http://vault
      valueOverrides: {}
    kafka:
      name: kafka
      namespace: default
      repo: ""
      branch: ""
      commit: ""
      version: 0.8.7
      syncedAt: 2018-12-31T12:37:09.553823158-05:00
      chart: helm.n5o.black/kafka
      reportDeployment: false
      dependsOn:
      - zookeeper
      actions: []
      values:
        blue:
          dynamic:
            manager.auth.htpasswd: |
              kafkaManagerPassword=$(bosun lastpass password Shared-Blue/blue-kafka-admin admin https://kafka.n5o.blue)
              defaultPassword=$(htpasswd -nb admin $kafkaManagerPassword)
              bosun vault secret naveego-secrets/kafka/password-secret htpasswd --default $defaultPassword | base64
            manager.auth.secretName: kafka-manager-auth
          static:
            additionalPorts: {}
            affinity: {}
            configurationOverrides:
              offsets.topic.replication.factor: 3
            domain: n5o.blue
            external:
              distinct: false
              domain: cluster.local
              enabled: false
              firstListenerPort: 31090
              init:
                image: lwolf/kubectl_deployer
                imagePullPolicy: IfNotPresent
                imageTag: "0.4"
              servicePort: 19092
              type: NodePort
            fullnameOverride: kafka
            headless:
              port: 9092
            image: confluentinc/cp-kafka
            imagePullPolicy: IfNotPresent
            imageTag: 4.1.1-2
            jmx:
              configMap:
                enabled: true
                overrideConfig: {}
                overrideName: ""
              port: 5555
              whitelistObjectNames:
              - kafka.controller:*
              - kafka.server:*
              - java.lang:*
              - kafka.network:*
              - kafka.log:*
            kafkaHeapOptions: -Xmx1G -Xms1G
            logSubPath: logs
            manager:
              auth:
                enabled: true
                htpasswd: null
                secretName: kafka-manager-auth
            nodeSelector: {}
            persistence:
              enabled: true
              size: 256Gi
              storageClass: ssd
            podManagementPolicy: OrderedReady
            prometheus:
              jmx:
                enabled: true
                image: solsson/kafka-prometheus-jmx-exporter@sha256
                imageTag: a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8
                interval: 10s
                port: 5556
                resources: {}
              kafka:
                enabled: true
                image: danielqsj/kafka-exporter
                imageTag: v1.2.0
                interval: 10s
                port: 9308
                resources: {}
              operator:
                enabled: false
                serviceMonitor:
                  namespace: monitoring
                  selector:
                    prometheus: kube-prometheus
            rbac:
              enabled: true
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replicas: 3
            resources:
              limits:
                memory: 2Gi
              requests:
                memory: 2Gi
            storageClass: ssd
            terminationGracePeriodSeconds: 60
            tolerations: []
            topics: []
            updateStrategy:
              type: OnDelete
            zookeeper:
              affinity: {}
              enabled: false
              env:
                ZK_HEAP_SIZE: 1G
              image:
                PullPolicy: IfNotPresent
              persistence:
                enabled: false
              port: 2181
              resources: null
              url: zookeeper-0.zookeeper-headless:2181,zookeeper-1.zookeeper-headless:2181,zookeeper-2.zookeeper-headless
        green:
          dynamic:
            manager.auth.htpasswd: "# generate or get the password from lastpass\nkafkaManagerPassword=$(bosun
              lastpass password Shared-Green/green-kafka-admin admin https://kafka.n5o.green)\n#
              hash the password \ndefaultPassword=$(htpasswd -nb admin $kafkaManagerPassword)\n#
              Get the hashed password from vault\n# If vault doesn't know the hashed
              password, it will be set and returned\n# The hashed password is stored
              in vault so that we don't change the hashed password\n# on every deploy
              (htpasswd uses a different salt each time, so if we didn't cache \n#
              the hashed password in vault, the chart would appear to be changing
              every time this is run).\nbosun vault secret naveego-secrets/kafka/password-secret
              htpasswd --default $defaultPassword | base64\n"
            manager.auth.secretName: kafka-manager-auth
          static:
            additionalPorts: {}
            affinity: {}
            configurationOverrides:
              offsets.topic.replication.factor: 3
            domain: n5o.green
            external:
              distinct: false
              domain: cluster.local
              enabled: false
              firstListenerPort: 31090
              init:
                image: lwolf/kubectl_deployer
                imagePullPolicy: IfNotPresent
                imageTag: "0.4"
              servicePort: 19092
              type: NodePort
            fullnameOverride: kafka
            headless:
              port: 9092
            image: confluentinc/cp-kafka
            imagePullPolicy: IfNotPresent
            imageTag: 4.1.1-2
            jmx:
              configMap:
                enabled: true
                overrideConfig: {}
                overrideName: ""
              port: 5555
              whitelistObjectNames:
              - kafka.controller:*
              - kafka.server:*
              - java.lang:*
              - kafka.network:*
              - kafka.log:*
            kafkaHeapOptions: -Xmx1G -Xms1G
            logSubPath: logs
            manager:
              auth:
                enabled: true
                htpasswd: null
                secretName: kafka-manager-auth
            nodeSelector: {}
            persistence:
              enabled: true
              size: 64Gi
              storageClass: ssd
            podManagementPolicy: OrderedReady
            prometheus:
              jmx:
                enabled: true
                image: solsson/kafka-prometheus-jmx-exporter@sha256
                imageTag: a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8
                interval: 10s
                port: 5556
                resources: {}
              kafka:
                enabled: true
                image: danielqsj/kafka-exporter
                imageTag: v1.2.0
                interval: 10s
                port: 9308
                resources: {}
              operator:
                enabled: false
                serviceMonitor:
                  namespace: monitoring
                  selector:
                    prometheus: kube-prometheus
            rbac:
              enabled: true
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replicas: 3
            resources:
              limits:
                memory: 1Gi
              requests:
                memory: 1Gi
            storageClass: ssd
            terminationGracePeriodSeconds: 60
            tolerations: []
            topics: []
            updateStrategy:
              type: OnDelete
            zookeeper:
              affinity: {}
              enabled: false
              env:
                ZK_HEAP_SIZE: 1G
              image:
                PullPolicy: IfNotPresent
              persistence:
                enabled: false
              port: 2181
              resources: null
              url: zookeeper-0.zookeeper-headless:2181,zookeeper-1.zookeeper-headless:2181,zookeeper-2.zookeeper-headless
        red:
          static:
            additionalPorts: {}
            affinity: {}
            configurationOverrides:
              offsets.topic.replication.factor: 1
            domain: n5o.red
            external:
              enabled: true
              firstListenerPort: 3100
              servicePort: 9092
            fullnameOverride: kafka
            headless:
              port: 9092
            image: confluentinc/cp-kafka
            imagePullPolicy: IfNotPresent
            imageTag: 4.1.1-2
            jmx:
              configMap:
                enabled: true
                overrideConfig: {}
                overrideName: ""
              port: 5555
              whitelistObjectNames:
              - kafka.controller:*
              - kafka.server:*
              - java.lang:*
              - kafka.network:*
              - kafka.log:*
            kafkaHeapOptions: -Xmx512M -Xms312M
            logSubPath: logs
            manager:
              auth:
                enabled: false
            nodeSelector: {}
            persistence:
              enabled: true
              size: 1Gi
              storageClass: ssd
            podManagementPolicy: OrderedReady
            prometheus:
              jmx:
                enabled: true
                image: solsson/kafka-prometheus-jmx-exporter@sha256
                imageTag: a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8
                interval: 10s
                port: 5556
                resources: {}
              kafka:
                enabled: true
                image: danielqsj/kafka-exporter
                imageTag: v1.2.0
                interval: 10s
                port: 9308
                resources: {}
              operator:
                enabled: false
                serviceMonitor:
                  namespace: monitoring
                  selector:
                    prometheus: kube-prometheus
            rbac:
              enabled: true
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replicas: 1
            resources:
              limits:
                memory: 1024Mi
              requests:
                memory: 512Mi
            serviceDomain: n5o.red
            storageClass: ssd
            terminationGracePeriodSeconds: 60
            tolerations: []
            topics: []
            updateStrategy:
              type: OnDelete
            zookeeper:
              port: 2181
              url: zookeeper-headless
      valueOverrides: {}
    mdm-ui:
      name: mdm-ui
      namespace: ""
      repo: naveegoinc/frontends
      branch: release/2018.2.1
      commit: 5927a5f
      version: 0.2.1
      syncedAt: 2018-12-31T15:35:48.378867054-05:00
      chart: helm.n5o.black/mdm-ui
      image: docker.n5o.black/private/mdm-ui
      imageTag: 0.2.1-2018.2.1
      reportDeployment: true
      dependsOn: []
      actions: []
      values:
        blue:
          dynamic:
            elastic.issuerUrl: https://auth.n5o.blue
          static:
            affinity: {}
            domain: n5o.green
            elastic:
              host: http://elasticsearch:9200
              issuerUrl: https://auth.n5o.green
            ingress:
              annotations:
                kubernetes.io/ingress.class: traefik
              enabled: true
              path: /
            name: mdm-ui
            nodeSelector: {}
            pullSecret: docker-n5o-black
            resources: {}
            service:
              port: 80
              type: ClusterIP
            tag: latest
            tolerations: []
        green:
          dynamic:
            elastic.issuerUrl: http://auth
          static:
            affinity: {}
            domain: n5o.green
            elastic:
              host: http://elasticsearch:9200
              issuerUrl: https://auth.n5o.green
            ingress:
              annotations:
                kubernetes.io/ingress.class: traefik
              enabled: true
              path: /
            name: mdm-ui
            nodeSelector: {}
            pullSecret: docker-n5o-black
            resources: {}
            service:
              port: 80
              type: ClusterIP
            tag: latest
            tolerations: []
        red:
          dynamic:
            elastic.issuerUrl: http://auth
          static:
            affinity: {}
            domain: n5o.green
            elastic:
              host: http://elasticsearch:9200
              issuerUrl: https://auth.n5o.green
            ingress:
              annotations:
                kubernetes.io/ingress.class: traefik
              enabled: true
              path: /
            name: mdm-ui
            nodeSelector: {}
            pullSecret: docker-n5o-black
            resources: {}
            service:
              port: 80
              type: ClusterIP
            tag: latest
            tolerations: []
      valueOverrides: {}
    metabase:
      name: metabase
      namespace: ""
      repo: naveegoinc/metabase
      branch: release/2018.2.1
      commit: ea64da0
      version: 0.3.2
      syncedAt: 2018-12-31T13:34:16.875498933-05:00
      chart: helm.n5o.black/metabase
      image: docker.n5o.black/private/metabase
      imageTag: 0.3.2-2018.2.1
      reportDeployment: true
      dependsOn:
      - mongodb
      - vault
      - nats
      - kafka
      actions:
      - name: Vault setup
        when: BeforeDeploy
        vault:
          layout:
            auth: {}
            mounts: {}
            resources:
              /auth/approle/role/metabase:
                allowed_custom_claims: []
                aud: naveego
                claims:
                  role: metabase
                  tid: naveego
                key_set: default
                type: jwt
              /auth/kubernetes/role/metabase:
                bound_service_account_names:
                - metabase
                - devops
                bound_service_account_namespaces: '*'
                period: 60m
                policies: metabase
              /database/roles/mongodb-metabase:
                creation_statements: |
                  {
                      "db": "admin",
                      "roles": [
                          {
                              "role": "readWriteAnyDatabase",
                              "db": "admin"
                          }
                      ]
                  }
                db_name: mongodb
                default_ttl: 1h
            policies:
              metabase:
                path:
                  auth/token/lookup-self:
                    capabilities:
                    - read
                  database/creds/mongodb-metabase:
                    capabilities:
                    - read
                  naveego-secrets/mongodb/metabase:
                    capabilities:
                    - read
                    comment: Temporary location of mongodb credentials until VPC peering
                      is configured.
      values:
        blue:
          dynamic:
            aspnet.env: Production
            domain: n5o.blue
            mongodb: mongodb://(vault:naveego-secrets/mongodb/metabase?template={{.username}}:{{.password}})@mongo1.n5o.blue:27017,mongo2.n5o.blue:27017,mongo3.n5o.blue:27017/?replicaSet=naveego&readPreference=primary&authSource=admin
            nats: nats://nats-nats-client:4222
            tag: 0.3.2-2018.2.1
            vault: https://vault.n5o.blue
          static:
            aspnet:
              env: Production
            domain: n5o.red
            imagePullPolicy: Always
            kafka: kafka:9092
            logging:
              level: Debug
            mongodb: mongodb://(vault:database/creds/mongodb-metabase?template={{.username}}:{{.password}})@mongodb:27017
            nats: nats://nats-nats-client:4222
            replicaCount: 1
            routeToHost: false
            tag: latest
            vault: http://vault
        green:
          dynamic:
            aspnet.env: Production
            domain: n5o.green
            nats: nats://nats-nats-client:4222
          static:
            aspnet:
              env: Production
            domain: n5o.red
            imagePullPolicy: Always
            kafka: kafka:9092
            logging:
              level: Debug
            mongodb: mongodb://(vault:database/creds/mongodb-metabase?template={{.username}}:{{.password}})@mongodb:27017
            nats: nats://nats-nats-client:4222
            replicaCount: 1
            routeToHost: false
            tag: latest
            vault: http://vault
        red:
          dynamic:
            aspnet.env: Production
            domain: n5o.red
            nats: nats://nats-nats-client:4222
          static:
            aspnet:
              env: Production
            domain: n5o.red
            imagePullPolicy: Always
            kafka: kafka:9092
            logging:
              level: Debug
            mongodb: mongodb://(vault:database/creds/mongodb-metabase?template={{.username}}:{{.password}})@mongodb:27017
            nats: nats://nats-nats-client:4222
            replicaCount: 1
            routeToHost: false
            tag: latest
            vault: http://vault
      valueOverrides: {}
    mongodb:
      name: mongodb
      namespace: default
      repo: ""
      branch: ""
      commit: ""
      version: 3.5.3
      syncedAt: 2018-12-31T12:37:09.333042311-05:00
      chart: helm.n5o.black/mongodb
      reportDeployment: false
      dependsOn: []
      actions:
      - name: Configure vault/mongo integration
        when: AfterDeploy
        where: red,green
        maxAttempts: 3
        timeout: 5s
        interval: 10s
        vault:
          literal: |
            resources:
              # This configures the secret engine mount.
              # The connection string must use a host name which is resolvable by the Vault instance in the environment.
              /database/config/mongodb:
                "plugin_name": "mongodb-database-plugin"
                "connection_url": "mongodb://{{`{{`}}username}}:{{`{{`}}password}}@mongodb:27017"
                "allowed_roles": "*"
                "username": "{{ .Values.auth.adminUser }}"
                "password": "{{ .Values.auth.adminPassword }}"

              # This creates an admin role which can be checked out.
              /database/roles/mongodb-admin:
                "db_name": "mongodb"
                "default_ttl": "1h"
                "creation_statements": |
                  {
                      "db": "admin",
                      "roles": [
                          {
                              "role": "userAdminAnyDatabase",
                              "db": "admin"
                          },
                          {
                              "role": "readWriteAnyDatabase",
                              "db": "admin"
                          }
                      ]
                  }
      values:
        blue:
          dynamic:
            auth.adminPassword: |
              bosun vault secret naveego-secrets/mongodb/default/admin-password password --generate
            auth.key: |
              bosun vault secret naveego-secrets/mongodb/default/auth-key key --generate
            auth.metricsPassword: |
              bosun vault secret naveego-secrets/mongodb/default/metrics-password password --generate
            auth.metricsUser: metricsuser
          static:
            affinity: {}
            auth:
              adminPassword: rootpassword
              adminUser: nvgoadmin
              enabled: true
              key: 3523331693f0485a8227837ec6bcc664
              metricsPassword: 132c7ffa-974a-49fd-bcf9-f64ad9d3f3cf
              metricsUser: metricsuser
            configmap: null
            domain: n5o.blue
            extraLabels: {}
            extraVars: {}
            fullnameOverride: mongodb
            image:
              pullPolicy: IfNotPresent
              repository: mongo
              tag: 3.6
            installImage:
              pullPolicy: IfNotPresent
              repository: k8s.gcr.io/mongodb-install
              tag: 0.6
            isolateToNamespace: false
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            metrics:
              enabled: true
              path: /metrics
              port: 9216
              prometheusServiceDiscovery: true
              resources: {}
              socketTimeout: 3s
              syncTimeout: 1m
            nodeName: mongo
            nodeSelector: {}
            persistentVolume:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: true
              size: 125Gi
              storageClass: ssd
            podAnnotations: {}
            podDisruptionBudget: {}
            port: 27017
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            replicaSetName: rs0
            replicas: 3
            resources: {}
            securityContext:
              fsGroup: 999
              runAsNonRoot: true
              runAsUser: 999
            serviceAnnotations: {}
            tls:
              enabled: false
            tolerations: []
        green:
          dynamic:
            auth.adminPassword: |
              bosun vault secret naveego-secrets/mongodb/default/admin-password password --generate
            auth.key: |
              bosun vault secret naveego-secrets/mongodb/default/auth-key key --generate
            auth.metricsPassword: |
              bosun vault secret naveego-secrets/mongodb/default/metrics-password password --generate
            auth.metricsUser: metricsuser
          static:
            affinity: {}
            auth:
              adminPassword: rootpassword
              adminUser: nvgoadmin
              enabled: true
              key: 3523331693f0485a8227837ec6bcc664
              metricsPassword: 132c7ffa-974a-49fd-bcf9-f64ad9d3f3cf
              metricsUser: metricsuser
            configmap: null
            domain: n5o.green
            extraLabels: {}
            extraVars: {}
            fullnameOverride: mongodb
            image:
              pullPolicy: IfNotPresent
              repository: mongo
              tag: 3.6
            installImage:
              pullPolicy: IfNotPresent
              repository: k8s.gcr.io/mongodb-install
              tag: 0.6
            isolateToNamespace: false
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            metrics:
              enabled: true
              path: /metrics
              port: 9216
              prometheusServiceDiscovery: true
              resources: {}
              socketTimeout: 3s
              syncTimeout: 1m
            nodeName: mongo
            nodeSelector: {}
            persistentVolume:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: true
              size: 100Gi
              storageClass: ssd
            podAnnotations: {}
            podDisruptionBudget: {}
            port: 27017
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            replicaSetName: rs0
            replicas: 1
            resources: {}
            securityContext:
              fsGroup: 999
              runAsNonRoot: true
              runAsUser: 999
            serviceAnnotations: {}
            tls:
              enabled: false
            tolerations: []
        red:
          dynamic:
            auth.adminPassword: |
              bosun vault secret naveego-secrets/mongodb/default/admin-password password --generate
            auth.key: |
              bosun vault secret naveego-secrets/mongodb/default/auth-key key --generate
            auth.metricsPassword: |
              bosun vault secret naveego-secrets/mongodb/default/metrics-password password --generate
            auth.metricsUser: metricsuser
          static:
            affinity: {}
            auth:
              adminPassword: rootpassword
              adminUser: nvgoadmin
              enabled: true
              key: 3523331693f0485a8227837ec6bcc664
              metricsPassword: 132c7ffa-974a-49fd-bcf9-f64ad9d3f3cf
              metricsUser: metricsuser
            configmap: null
            domain: n5o.red
            extraLabels: {}
            extraVars: {}
            fullnameOverride: mongodb
            image:
              pullPolicy: IfNotPresent
              repository: mongo
              tag: 3.6
            installImage:
              pullPolicy: IfNotPresent
              repository: k8s.gcr.io/mongodb-install
              tag: 0.6
            isolateToNamespace: false
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            metrics:
              enabled: false
            nodeName: mongo
            nodeSelector: {}
            persistentVolume:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: true
              size: 512Mi
              storageClass: ssd
            podAnnotations: {}
            podDisruptionBudget: {}
            port: 27017
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            replicaSetName: rs0
            replicas: 1
            resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 100m
                memory: 256Mi
            securityContext:
              fsGroup: 999
              runAsNonRoot: true
              runAsUser: 999
            serviceAnnotations: {}
            tls:
              enabled: false
            tolerations: []
      valueOverrides: {}
    nats:
      name: nats
      namespace: default
      repo: ""
      branch: ""
      commit: ""
      version: 0.0.6
      syncedAt: 2018-12-31T12:37:09.467365831-05:00
      chart: helm.n5o.black/nats
      reportDeployment: false
      dependsOn: []
      actions: []
      values:
        blue:
          dynamic:
            chadburn.image.name: docker.n5o.black/public/chadburn
            chadburn.image.tag: 1.1.1
            chadburn.keyDiscoveryURL: https://auth.n5o.blue/discovery/keys
            image.registry: docker.io
            image.repository: bitnami/nats
            image.tag: 1.1.0
          static:
            antiAffinity: soft
            auth:
              enabled: false
              user: nats_client
            chadburn:
              keyDiscoveryURL: https://auth.n5o.blue/discovery/keys
            clientService:
              annotations: {}
              port: 4222
              type: ClusterIP
            clusterAuth:
              enabled: false
              user: nats_cluster
            clusterService:
              annotations: {}
              port: 6222
              type: ClusterIP
            debug:
              enabled: false
              logtime: false
              trace: false
            image:
              pullPolicy: Always
              registry: docker.io
              repository: bitnami/nats
              tag: 1.1.0
            ingress:
              enabled: false
              hosts:
              - annotations: null
                name: nats.local
                tls: false
                tlsSecret: nats.local-tls
              secrets: null
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            maxConnections: 100
            maxControlLine: 512
            maxPayload: 131072
            monitoringService:
              annotations: {}
              loadBalancerIP: null
              port: 8222
              type: ClusterIP
            networkPolicy:
              allowExternal: false
              enabled: true
            podAnnotations: {}
            podLabels: {}
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replicaCount: 3
            resources:
              limits:
                cpu: 500m
                memory: 1024Mi
              requests:
                cpu: 100m
                memory: 512Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            sidecars: null
            statefulset:
              updateStrategy: RollingUpdate
            writeDeadline: 2s
        green:
          dynamic:
            chadburn.image.name: docker.n5o.black/public/chadburn
            chadburn.image.tag: 1.1.1
            chadburn.keyDiscoveryURL: http://auth/discovery/keys
            image.registry: docker.io
            image.repository: bitnami/nats
            image.tag: 1.1.0
          static:
            antiAffinity: soft
            auth:
              enabled: false
              user: nats_client
            chadburn:
              keyDiscoveryURL: http://auth/discovery/keys
            clientService:
              annotations: {}
              port: 4222
              type: ClusterIP
            clusterAuth:
              enabled: false
              user: nats_cluster
            clusterService:
              annotations: {}
              port: 6222
              type: ClusterIP
            debug:
              enabled: false
              logtime: false
              trace: false
            image:
              pullPolicy: Always
              registry: docker.io
              repository: bitnami/nats
              tag: 1.1.0
            ingress:
              enabled: false
              hosts:
              - annotations: null
                name: nats.local
                tls: false
                tlsSecret: nats.local-tls
              secrets: null
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            maxConnections: 100
            maxControlLine: 512
            maxPayload: 131072
            monitoringService:
              annotations: {}
              loadBalancerIP: null
              port: 8222
              type: ClusterIP
            networkPolicy:
              allowExternal: false
              enabled: true
            podAnnotations: {}
            podLabels: {}
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replicaCount: 3
            resources:
              limits:
                cpu: 500m
                memory: 1024Mi
              requests:
                cpu: 100m
                memory: 512Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            sidecars: null
            statefulset:
              updateStrategy: RollingUpdate
            writeDeadline: 2s
        red:
          dynamic:
            chadburn.image.name: docker.n5o.black/public/chadburn
            chadburn.image.tag: 1.1.1
            chadburn.keyDiscoveryURL: http://auth/discovery/keys
            image.registry: docker.io
            image.repository: bitnami/nats
            image.tag: 1.1.0
          static:
            antiAffinity: soft
            auth:
              enabled: false
              user: nats_client
            chadburn:
              keyDiscoveryURL: http://auth/discovery/keys
            clientService:
              annotations: {}
              port: 4222
              type: ClusterIP
            clusterAuth:
              enabled: false
              user: nats_cluster
            clusterService:
              annotations: {}
              port: 6222
              type: ClusterIP
            debug:
              enabled: false
              logtime: false
              trace: false
            image:
              pullPolicy: Always
              registry: docker.io
              repository: bitnami/nats
              tag: 1.1.0
            ingress:
              enabled: false
              hosts:
              - annotations: null
                name: nats.local
                tls: false
                tlsSecret: nats.local-tls
              secrets: null
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            maxConnections: 100
            maxControlLine: 512
            maxPayload: 131072
            monitoringService:
              annotations: {}
              loadBalancerIP: null
              port: 8222
              type: ClusterIP
            networkPolicy:
              allowExternal: false
              enabled: true
            podAnnotations: {}
            podLabels: {}
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replicaCount: 1
            resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 100m
                memory: 256Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            sidecars: null
            statefulset:
              updateStrategy: RollingUpdate
            writeDeadline: 2s
      valueOverrides: {}
    traefik:
      name: traefik
      namespace: kube-system
      repo: ""
      branch: ""
      commit: ""
      version: 1.35.0
      syncedAt: 2018-12-31T12:37:09.378450583-05:00
      chart: helm.n5o.black/traefik
      reportDeployment: false
      dependsOn: []
      actions:
      - name: Test dashboard
        when: AfterDeploy
        maxAttempts: 5
        timeout: 5s
        interval: 5s
        test:
          http: https://traefik.{{ .Domain }}
      values:
        blue:
          static:
            accessLogs:
              enabled: true
            acme:
              challengeType: tls-sni-01
              dnsProvider:
                auroradns:
                  AURORA_ENDPOINT: ""
                  AURORA_KEY: ""
                  AURORA_USER_ID: ""
                azure:
                  AZURE_CLIENT_ID: ""
                  AZURE_CLIENT_SECRET: ""
                  AZURE_RESOURCE_GROUP: ""
                  AZURE_SUBSCRIPTION_ID: ""
                  AZURE_TENANT_ID: ""
                cloudflare:
                  CLOUDFLARE_API_KEY: ""
                  CLOUDFLARE_EMAIL: ""
                digitalocean:
                  DO_AUTH_TOKEN: ""
                dnsimple:
                  DNSIMPLE_BASE_URL: ""
                  DNSIMPLE_OAUTH_TOKEN: ""
                dnsmadeeasy:
                  DNSMADEEASY_API_KEY: ""
                  DNSMADEEASY_API_SECRET: ""
                  DNSMADEEASY_SANDBOX: ""
                dnspod:
                  DNSPOD_API_KEY: ""
                dyn:
                  DYN_CUSTOMER_NAME: ""
                  DYN_PASSWORD: ""
                  DYN_USER_NAME: ""
                exoscale:
                  EXOSCALE_API_KEY: ""
                  EXOSCALE_API_SECRET: ""
                  EXOSCALE_ENDPOINT: ""
                gandi:
                  GANDI_API_KEY: ""
                gcloud:
                  GCE_PROJECT: ""
                  GCE_SERVICE_ACCOUNT_FILE: ""
                godaddy:
                  GODADDY_API_KEY: ""
                  GODADDY_API_SECRET: ""
                linode:
                  LINODE_API_KEY: ""
                name: nil
                namecheap:
                  NAMECHEAP_API_KEY: ""
                  NAMECHEAP_API_USER: ""
                ns1:
                  NS1_API_KEY: ""
                otc:
                  OTC_DOMAIN_NAME: ""
                  OTC_IDENTITY_ENDPOINT: ""
                  OTC_PASSWORD: ""
                  OTC_PROJECT_NAME: ""
                  OTC_USER_NAME: ""
                pdns:
                  PDNS_API_URL: ""
                rackspace:
                  RACKSPACE_API_KEY: ""
                  RACKSPACE_USER: ""
                rfc2136:
                  RFC2136_NAMESERVER: ""
                  RFC2136_TIMEOUT: ""
                  RFC2136_TSIG_ALGORITHM: ""
                  RFC2136_TSIG_KEY: ""
                  RFC2136_TSIG_SECRET: ""
                route53:
                  AWS_ACCESS_KEY_ID: ""
                  AWS_REGION: ""
                  AWS_SECRET_ACCESS_KEY: ""
                vultr:
                  VULTR_API_KEY: ""
              domains:
                domainsList: null
                enabled: false
              email: admin@example.com
              enabled: false
              logging: false
              persistence:
                accessMode: ReadWriteOnce
                annotations: {}
                enabled: true
                size: 1Gi
              staging: true
            affinity: {}
            cpuLimit: 250m
            cpuRequest: 100m
            dashboard:
              auth:
                basic:
                  admin: $apr1$JcpMkt9m$nxSYGE6rGRd8jNTPLZMg4/
                  monitor: $apr1$lOzKJ8Fv$r5kXQiDZXlIq1jRsdpHOE1
              domain: traefik.n5o.blue
              enabled: true
              ingress: null
              service: null
              statistics: null
            debug:
              enabled: false
            deployment:
              hostPort:
                dashboardEnabled: false
                httpEnabled: false
                httpsEnabled: false
            deploymentStrategy: {}
            externalTrafficPolicy: Cluster
            gzip:
              enabled: true
            image: traefik
            imageTag: 1.7.6
            kubernetes:
              namespaces:
              - default
              - logging
              - kube-system
            loadBalancerIP: null
            loadBalancerSourceRanges: []
            memoryLimit: 512Mi
            memoryRequest: 256Mi
            metrics:
              datadog:
                enabled: false
              prometheus:
                buckets:
                - 0.1
                - 0.3
                - 0.5
                - 0.8
                - 1
                - 2
                - 5
                enabled: true
              statsd:
                enabled: false
            nodeSelector: {}
            podDisruptionBudget: {}
            proxyProtocol:
              enabled: false
              trustedIPs: null
            rbac:
              enabled: true
            replicas: 3
            sendAnonymousUsage: false
            service:
              annotations:
                service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
                service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:759703860832:certificate/9b11a3d8-d52d-403a-87cd-966e13266a67
                service.beta.kubernetes.io/aws-load-balancer-ssl-ports: 443,8080
              nodePorts:
                http: ""
                https: ""
            serviceType: LoadBalancer
            ssl:
              enabled: false
              enforced: true
            tolerations: []
            whiteListSourceRange: false
        green:
          static:
            accessLogs:
              enabled: true
              format: common
            acme:
              challengeType: tls-sni-01
              dnsProvider:
                auroradns:
                  AURORA_ENDPOINT: ""
                  AURORA_KEY: ""
                  AURORA_USER_ID: ""
                azure:
                  AZURE_CLIENT_ID: ""
                  AZURE_CLIENT_SECRET: ""
                  AZURE_RESOURCE_GROUP: ""
                  AZURE_SUBSCRIPTION_ID: ""
                  AZURE_TENANT_ID: ""
                cloudflare:
                  CLOUDFLARE_API_KEY: ""
                  CLOUDFLARE_EMAIL: ""
                digitalocean:
                  DO_AUTH_TOKEN: ""
                dnsimple:
                  DNSIMPLE_BASE_URL: ""
                  DNSIMPLE_OAUTH_TOKEN: ""
                dnsmadeeasy:
                  DNSMADEEASY_API_KEY: ""
                  DNSMADEEASY_API_SECRET: ""
                  DNSMADEEASY_SANDBOX: ""
                dnspod:
                  DNSPOD_API_KEY: ""
                dyn:
                  DYN_CUSTOMER_NAME: ""
                  DYN_PASSWORD: ""
                  DYN_USER_NAME: ""
                exoscale:
                  EXOSCALE_API_KEY: ""
                  EXOSCALE_API_SECRET: ""
                  EXOSCALE_ENDPOINT: ""
                gandi:
                  GANDI_API_KEY: ""
                gcloud:
                  GCE_PROJECT: ""
                  GCE_SERVICE_ACCOUNT_FILE: ""
                godaddy:
                  GODADDY_API_KEY: ""
                  GODADDY_API_SECRET: ""
                linode:
                  LINODE_API_KEY: ""
                name: nil
                namecheap:
                  NAMECHEAP_API_KEY: ""
                  NAMECHEAP_API_USER: ""
                ns1:
                  NS1_API_KEY: ""
                otc:
                  OTC_DOMAIN_NAME: ""
                  OTC_IDENTITY_ENDPOINT: ""
                  OTC_PASSWORD: ""
                  OTC_PROJECT_NAME: ""
                  OTC_USER_NAME: ""
                pdns:
                  PDNS_API_URL: ""
                rackspace:
                  RACKSPACE_API_KEY: ""
                  RACKSPACE_USER: ""
                rfc2136:
                  RFC2136_NAMESERVER: ""
                  RFC2136_TIMEOUT: ""
                  RFC2136_TSIG_ALGORITHM: ""
                  RFC2136_TSIG_KEY: ""
                  RFC2136_TSIG_SECRET: ""
                route53:
                  AWS_ACCESS_KEY_ID: ""
                  AWS_REGION: ""
                  AWS_SECRET_ACCESS_KEY: ""
                vultr:
                  VULTR_API_KEY: ""
              domains:
                domainsList: null
                enabled: false
              email: admin@example.com
              enabled: false
              logging: false
              persistence:
                accessMode: ReadWriteOnce
                annotations: {}
                enabled: true
                size: 1Gi
              staging: true
            affinity: {}
            cpuLimit: 250m
            cpuRequest: 100m
            dashboard:
              auth: null
              domain: traefik.n5o.green
              enabled: true
              ingress: null
              service: null
              statistics:
                recentErrors: 20
            debug:
              enabled: true
            deployment:
              hostPort:
                dashboardEnabled: false
                httpEnabled: false
                httpsEnabled: false
            deploymentStrategy: {}
            externalTrafficPolicy: Cluster
            gzip:
              enabled: true
            image: traefik
            imageTag: 1.7.6
            kubernetes:
              namespaces:
              - default
              - logging
              - kube-system
            loadBalancerIP: null
            loadBalancerSourceRanges:
            - 192.168.14.0/24
            - 10.200.100.0/24
            - 10.200.101.0/24
            - 10.200.102.0/24
            - 10.200.0.0/24
            - 10.200.1.0/24
            - 10.200.2.0/24
            memoryLimit: 512Mi
            memoryRequest: 256Mi
            metrics:
              datadog:
                enabled: false
              prometheus:
                buckets:
                - 0.1
                - 0.3
                - 0.5
                - 0.8
                - 1
                - 2
                - 5
                enabled: true
              statsd:
                enabled: false
            nodeSelector: {}
            podDisruptionBudget: {}
            proxyProtocol:
              enabled: false
              trustedIPs: null
            rbac:
              enabled: true
            replicas: 1
            sendAnonymousUsage: false
            service:
              annotations:
                service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
                service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:696021726152:certificate/cc0b9b7b-af79-44a2-8828-95acdbbaccc6
            serviceType: LoadBalancer
            ssl:
              enabled: false
              enforced: true
            tolerations: []
            whiteListSourceRange: false
        red:
          static:
            accessLogs:
              enabled: false
              format: common
            acme:
              challengeType: tls-sni-01
              dnsProvider:
                auroradns:
                  AURORA_ENDPOINT: ""
                  AURORA_KEY: ""
                  AURORA_USER_ID: ""
                azure:
                  AZURE_CLIENT_ID: ""
                  AZURE_CLIENT_SECRET: ""
                  AZURE_RESOURCE_GROUP: ""
                  AZURE_SUBSCRIPTION_ID: ""
                  AZURE_TENANT_ID: ""
                cloudflare:
                  CLOUDFLARE_API_KEY: ""
                  CLOUDFLARE_EMAIL: ""
                digitalocean:
                  DO_AUTH_TOKEN: ""
                dnsimple:
                  DNSIMPLE_BASE_URL: ""
                  DNSIMPLE_OAUTH_TOKEN: ""
                dnsmadeeasy:
                  DNSMADEEASY_API_KEY: ""
                  DNSMADEEASY_API_SECRET: ""
                  DNSMADEEASY_SANDBOX: ""
                dnspod:
                  DNSPOD_API_KEY: ""
                dyn:
                  DYN_CUSTOMER_NAME: ""
                  DYN_PASSWORD: ""
                  DYN_USER_NAME: ""
                exoscale:
                  EXOSCALE_API_KEY: ""
                  EXOSCALE_API_SECRET: ""
                  EXOSCALE_ENDPOINT: ""
                gandi:
                  GANDI_API_KEY: ""
                gcloud:
                  GCE_PROJECT: ""
                  GCE_SERVICE_ACCOUNT_FILE: ""
                godaddy:
                  GODADDY_API_KEY: ""
                  GODADDY_API_SECRET: ""
                linode:
                  LINODE_API_KEY: ""
                name: nil
                namecheap:
                  NAMECHEAP_API_KEY: ""
                  NAMECHEAP_API_USER: ""
                ns1:
                  NS1_API_KEY: ""
                otc:
                  OTC_DOMAIN_NAME: ""
                  OTC_IDENTITY_ENDPOINT: ""
                  OTC_PASSWORD: ""
                  OTC_PROJECT_NAME: ""
                  OTC_USER_NAME: ""
                pdns:
                  PDNS_API_URL: ""
                rackspace:
                  RACKSPACE_API_KEY: ""
                  RACKSPACE_USER: ""
                rfc2136:
                  RFC2136_NAMESERVER: ""
                  RFC2136_TIMEOUT: ""
                  RFC2136_TSIG_ALGORITHM: ""
                  RFC2136_TSIG_KEY: ""
                  RFC2136_TSIG_SECRET: ""
                route53:
                  AWS_ACCESS_KEY_ID: ""
                  AWS_REGION: ""
                  AWS_SECRET_ACCESS_KEY: ""
                vultr:
                  VULTR_API_KEY: ""
              domains:
                domainsList: null
                enabled: false
              email: admin@example.com
              enabled: false
              logging: false
              persistence:
                accessMode: ReadWriteOnce
                annotations: {}
                enabled: true
                size: 256Mi
              staging: true
            affinity: {}
            cpuLimit: 100m
            cpuRequest: 100m
            dashboard:
              auth: null
              domain: traefik.n5o.red
              enabled: true
              ingress: null
              service: null
              statistics: null
            debug:
              enabled: true
            deployment:
              hostPort:
                dashboardEnabled: false
                httpEnabled: false
                httpsEnabled: false
            deploymentStrategy: {}
            externalTrafficPolicy: Cluster
            gzip:
              enabled: true
            image: traefik
            imageTag: 1.7.4
            kubernetes:
              namespaces:
              - default
              - logging
              - kube-system
            loadBalancerIP: null
            loadBalancerSourceRanges: null
            memoryLimit: 512Mi
            memoryRequest: 128Mi
            metrics:
              datadog:
                enabled: false
              prometheus:
                buckets:
                - 0.1
                - 0.3
                - 0.5
                - 0.8
                - 1
                - 2
                - 5
                enabled: true
              statsd:
                enabled: false
            nodeSelector: {}
            podDisruptionBudget: {}
            proxyProtocol:
              enabled: false
              trustedIPs: null
            rbac:
              enabled: true
            replicas: 1
            sendAnonymousUsage: false
            service:
              annotations: null
              nodePorts:
                http: 80
                https: 443
            serviceType: NodePort
            ssl:
              defaultCert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUV3ekNDQXF1Z0F3SUJBZ0lKQUlwMW5PSStGTHdmTUEwR0NTcUdTSWIzRFFFQkN3VUFNQlF4RWpBUUJnTlYKQkFNTUNTb3VialZ2TG5KbFpEQWVGdzB4T0RFeU1USXhPREl5TkRKYUZ3MHlPREV5TURreE9ESXlOREphTUJReApFakFRQmdOVkJBTU1DU291YmpWdkxuSmxaRENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DCmdnSUJBTkVjV2YxQ2RONjlrY1V1NnR6a0JhbThLUlJmM0pWU3R4VlRDVGtYS2wrbmFxMG8vVmJtdDZkNURpbXIKeExpZUFxVS9yQXFCaUlpakFtMG9tMVBheFJKM3ZlR1pUTmxXankyazdGbXIxblZVYTBpZHJYMG1qTTVlT0EzdQowVjBhcE84bDVsVW15QWFNemJXakFZNFl0WGE1TVhTeVM2Z2wvTkVTNTA2bmVJS3RHR01tWGN2NURwdWY2NGZQCnNUODUrU0lkV1JNUDFObmx2azJtQmNRNVF4M1RiRVBCbTlFWE5LNHhNTjQ3ZlMxeHV4SDg2RXFueFRtRm9tWlkKbXhrTnJnR1AxNHFRSFJRWTRaRUdvRnNkZkh0cVp2cmFFWHM1dkpzRGJVQ3RYbnVSc2VmUnlLRnFFcnlWMFdrRwpHRHBJVkZ4aUhNLzhLSTc5QzhTaHhERmpJb0szMEh6QnJ6S2FMUVNRSGJnanVKSVpJbG9nRGtMNjRXaVhxb0wxClVBYy9rdDdjNHRWYzlubGhoT1hHN29BTlVDM0FpRXIzWWxNbHkwR1dMYXd3VmgvMjNrbElDR05XNUhPeHhsRHYKVkZvN0NzNEFoQi9LdFg5bzVZMTYvbEFVNWVSeHU5NmY3dTRubVlHQm1haDhhRG9HZHZ6UWhlMXptWWpNSzZzMgpRdWxhT3c0NENoaThzemdYUjBBYWFrSFBhRWxCeTdpRmdrT0pqSUJ2d1A1MFdhZWZCNmg3ZXZqR3psb0IwR3NIClY4WU8wZitGeXQ4Y0ZxZUJ5emR3SUo3RklxYmRsU1Nyc3JWS2ZPekVQeTBXOW42R21DL05uMmZhVVhiQmdwbTAKM0RwcWxtbTAwc1lDZkM4Yzg1SWovUm5zSmFtM2NUZFcvODZYTnpXSUlTdXVackl2QWdNQkFBR2pHREFXTUJRRwpBMVVkRVFRTk1BdUNDU291YmpWdkxuSmxaREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBTkdScHVQVjR0SVVLCnI4bks0NnYyUFVhMWVHa3Jsamg4dXUrajBWNjNZYXFOUFNFNnFVZkl5bU9YdDhucTk4dWVSb1I0VjBSMWVRUWwKQzBiejR1Q0lTaUtrTXYyRWEzMnhCRnZKTklYaG9NSTl6dVMzQ2JYSGpkZDNyeFN2Z0hsMG5QRnVNSHcrR1lnWQp4MGNFQ2dsbE4rbk8xUVVKdzBjNUpaS010YXB1dEowQkdHb1BGTUdFRVJUbDlIRlhuVXhWd1JYZzQwejhkLytyCnYyTlhIbUJ4YUoxMnQ2VlpXL0VzeFRsVUloTjcyQkdwOEdXRlpRZUFiZEhFMXVibFR3YXNQY0o0TUlHSzR0T24KdURPdlRWMmdBOUZRSzMzbTF4WWhubUVOaHBaT08yRkRMSzhGVDhaRnpKZ0tsZGNnY2RMN3l0ZFNiUTVtRkczYgpGWTk4VEY5MERXb2Urb2g2c1BhUnJkVjVoYWxmaVVFSTZUMjBISWJNdks1R1JLblJEMFRraDJDckhvaXR4bVlBClp1TVAvL2FlOXBhN1ljdkZvK1BZNHBDRytvOHpGeFlVclY0ZnkxQkM3dUh2eDFkOVhNMHBaK2FqK09iM0s2NXkKRGQ2MG5oU0dyeGQ0dXJqNlJFQzYvTmdtRGdJSFZJUUhoakJ0WGFXZ3FFZ0o1dWVmd3Y2YVRVUjBPVjNlaklINApmR0xncTA3QjY4L3ZOdVgrTHpLNXBId3JCWDZKcHF2dTlTRVpTb3Y5MWYvL3hBRFlDNld6S0p0TFh1NVQ0ZDlwCkRNeHErWmIwRDZZY29NemhLNlVISFBVWUdPL2RmRHJKNjdrUXpaaG1CQlNjZXowSHM4eDNTTHpxRkJSUHpyNXQKZUxHRFk2cjBIM3p6N2x1MFFXUWp1djd0R213RmFrST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
              defaultKey: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRRFJIRm45UW5UZXZaSEYKTHVyYzVBV3B2Q2tVWDl5VlVyY1ZVd2s1RnlwZnAycXRLUDFXNXJlbmVRNHBxOFM0bmdLbFA2d0tnWWlJb3dKdApLSnRUMnNVU2Q3M2htVXpaVm84dHBPeFpxOVoxVkd0SW5hMTlKb3pPWGpnTjd0RmRHcVR2SmVaVkpzZ0dqTTIxCm93R09HTFYydVRGMHNrdW9KZnpSRXVkT3AzaUNyUmhqSmwzTCtRNmJuK3VIejdFL09ma2lIVmtURDlUWjViNU4KcGdYRU9VTWQwMnhEd1p2UkZ6U3VNVERlTzMwdGNic1IvT2hLcDhVNWhhSm1XSnNaRGE0Qmo5ZUtrQjBVR09HUgpCcUJiSFh4N2FtYjYyaEY3T2J5YkEyMUFyVjU3a2JIbjBjaWhhaEs4bGRGcEJoZzZTRlJjWWh6UC9DaU8vUXZFCm9jUXhZeUtDdDlCOHdhOHltaTBFa0IyNEk3aVNHU0phSUE1Qyt1Rm9sNnFDOVZBSFA1TGUzT0xWWFBaNVlZVGwKeHU2QURWQXR3SWhLOTJKVEpjdEJsaTJzTUZZZjl0NUpTQWhqVnVSenNjWlE3MVJhT3dyT0FJUWZ5clYvYU9XTgpldjVRRk9Ya2NidmVuKzd1SjVtQmdabW9mR2c2Qm5iODBJWHRjNW1JekN1ck5rTHBXanNPT0FvWXZMTTRGMGRBCkdtcEJ6MmhKUWN1NGhZSkRpWXlBYjhEK2RGbW5ud2VvZTNyNHhzNWFBZEJyQjFmR0R0SC9oY3JmSEJhbmdjczMKY0NDZXhTS20zWlVrcTdLMVNuenN4RDh0RnZaK2hwZ3Z6WjluMmxGMndZS1p0Tnc2YXBacHROTEdBbnd2SFBPUwpJLzBaN0NXcHQzRTNWdi9PbHpjMWlDRXJybWF5THdJREFRQUJBb0lDQVFDOGJBeVdUVVNiMURzK2J5bElBdHNyCmQ1V1llMHg2N0w1Mkk0MUMrU0hBY1UySlhFN3krQS95Z3YwRkJYYk1WK3pRVkJCRW96V1EwVG1GZkxxQms3WlMKRHIxMVE3cGdlRU9wZ0Z0TDdhL2ZwMExJZXZQeHVrUFVURWU4SGo1ZTQzeE0xVnkzeTZzZlk4NlVaWjRvR1JHaQpPZnRiU0xFdGdaVk9HdmQ4QXlGdXRtUXNLMDBIVjVNWEhjR1FiZEFyeGFROFhpOStJcHpML3QwOGdHWGZ5eTB6CitlY3JJcEN4bG5Sc3BYeUFNeUIzUzJ5aUo3NTBUcnBETzZ2N0Jzb3lpQVlMK0QzaTZEcWJlbFArWnZjbFF1dUIKRlg1WGVSbVpiSXdMTGNwTEppemxzWUdaL29rSEVWcHl2WmlsUnMyYjdzSzlQOWJ3ZmlsWnRwL2MvVnFZbWRoawpTaDkwbncwREV4WTgyMHVuZFNTVG1TbmZFUDN1cnlTSFFkbzE0L1ZkVGU5L0wvZE9GTDJtcnh2YzBpR1ZUMkZtCml2RExpZXdrNmk2OEJJVlZ4UFRoYi9BMDdPSXU1am5SdVlVMGpuRE4vbGJNYWFPSi9DSGVtOFJHSExrYW93djQKUkkyd1dHNmFMNGdiZmNscS9KTm5MNWhvNzl5eVhxaCtlbGFKc0lxN2hma2lLRUR3bkp3a0I4N25YMVVZTjg4RwpPZmlrdHJaWFBsUXdHNTRXbFAxT1lZelJEaW9kNEMxVjIzYmJ4WWRCM2s0WVM5WTNkVklDQzlOclNXVGQ4Q1NFCjR6R3JWaEd6Mjk5QXlTblZKUkY5YVRtaG8wZHJXbmlXd3JtUUYvclVEcC9kWDh2Rk5ZOXhBNmlMZzdMcnFPT24KaTdjR0lzNlVEZVN2ZGNHbHlMY0wrUUtDQVFFQTZDWUNTTGFGQkJWWG5pcWRKUzEvbG4rZ3hjSWlrSHBFYVJ6bwpCbG1KcFp2K3BZQlpib01SbnhrbDFnWTM0a096MzhuQ1lRSE80azQrZ21zdEFnYko0RTZHMWh4L2I0OHRpeVlWCmE0NTZtMW1CYlMva1BVMEViMEhSYzljeWRsRjhYUXU2T1JPckpmOHlnZFJWR0FYRHJORkloOXoxQlNzR3dGYjUKcXBiN3VBVVRaN21MZ0Nyc1NmTG13WnBac3M2a3d0dG1LMElERkIwVWd3a2trNzBDTG1VWHZicWVkSGZoN1h4KwoxdW9LWmI4Q0hNMlZoMjFRbWdFc0Z6UFZHbnVwTSt2M0JhVHpURlVJKyt0cHkwMUJtYnB0eDAvYkZESkE5Ly9sCmp1dEs3bHdIdnFydTNKTG03S1RKNFZrbnpqT3h2SXI5MTVnRmQwMTI2ZkpxaHJJZjNRS0NBUUVBNXBobTltTVoKZ09vS1V6QVRRTEpScVNFUzAwRkpOV0FMQmcrM0lNMWhQVzdJcTZRWFZNZ2Z4YUthR1o3cHR5U0pRZC96WHR2aAppQm51eFVFTXZ3MG1tUmUyZmlaM2gydWtyMGY5elV4L2NlU3M0dU1FNGsyRWFncFAxMnNPMkVYVTYyd3JIdUswCjdXOUdLUXFPMzdoMVgvS3F4cHJJOXdiTnJDMVI2Y2FmbW5LOVlrTi8xSGxZajNvS3RSZFZaQnhaaENRMGxQcHIKQkluN0ZDMzhXR2lCcS9vcGN2cWhGaHJwMkpRYVFzVXhGajZ3ZG12dldRd3pHQTcxY0VwWW9RNkl5anlUNUpIawpRQ0dNak5FV3hiOVlTUVY0NVh3MktlVHNnRWtCSkRDcmVGZ2FvaXEvem5sYUVnejg1Vm9NWE1mcnR1bjZ2Q2laCkZlTWJKZ0U4OGtJL2V3S0NBUUIzOE10VlRoZkRXRk9BZ0h2WWJYMXlBRmJNVmRVTjJGM29BT3RQL0lyRmFhZFQKVXREaDdBMzZxVCtIS0lkTys3Ty9kN3BaN0ZrN1N6bTRvQzhNMFAwVVN2NFhPWG9ONVdlZWNQcTRLMURsV29VbwpLSW8vc2I4TXpIQ3U3UXhCWFRCbjBsdFFpZnp2RUw3RG5UU3B5TENrWlN5WUpXemlVcXlXUzFtSzdaNzRJSWM2CkcvOGJKUklYMHN1dVUxVHNzUjhuSGJ2WHRhOXBnT3pNRnJreks0QXBBRW9YMklkdG5WSzVKSTFUOUcrU3lmRUoKZUo0ODdobXF0OWhUMUkvUnN2cGt2UkZQZFQzT3ZsQjU5OU1kR3JrOTk3Z29OZlgycFZBejBaNkZETVFXQ3E1bApzR0xneTNWTDVvZjNTZHpyQ0lKWDYyZmpMOFFETTU2d21ISzVUT1p4QW9JQkFCallNTGU1STZWTkVnRzJlMHlNCktkbzBFd2dwejQ1dG82SnFqUXQrdFV4ZUpFYkI3aldYUGowWDhNeHozN0I0d2tVVHNPLzJkczBvSmg2Z2pKUUYKQWJTYTVuR2ZDVi9RekRTS2FDRDNiZi9DYUpJbGJZQklZOHpkQVk4dkhMRldqTU0wcTB5dmxsakNsV2VVbUtJbwpDSlZtMnRsOUVjdnpzck1yU3RrS0ttWUVtTHora3NZOHNMcjhwaXl1citlU1dsNnZXKzcxTUJTVUhUWW1ZanJRClA3QmN5cHgxdm1kWVRQdWxzVktpVmxDVVBvVHp5aHpwQUpSR0FGR3g0T3l4V1RHWTUwSklLYlJ6S09aL0hKbi8Kcks1cFpZWXNKTlhNc1dKOCt4K0FFdWxyYktzdU9lNHdDdkZJN3ZKekNrUHcwa2VwMi9icjFOcVQxbmY0eUMwOQowQU1DZ2dFQU1qT2V2OURhVTEyOWMwR1NhNlc4aTB4aW9SR1JORjd3OUZ6bzBUWm1oNE5RTzF2ZnYyanhEUGdCCmN0UHNOcUMyMlhBdVpVaHRuazgrcVV4WnZQMXpzUENsTCtLdWlGcVhaZlQ3ME9hNEJ0UGJJUUdYdFVING5yNzYKM3d2YjFaSXNvVU9UZ2FWMFhVVElTdGNINXNqNzNXbUxxOUpSbnpRVlkxdjRtbEF6alc3RVhRSng4MldueGtwLwpVeVgzYk1UTTlKUlNLOFZFNVJxcnJhZFZXaFBrTWpEZDdVUy9iUHVuZEI0Q2t3RFZIei9WdS9YTEx6YURMUWkzCmFKTm9DTUFaMVZDVkJOOE1oTnFmMnFJeWRRaXNwbWZCT2lmTWtvNDlJYVlXYWV6U2JpQVlTTFZLbENNL0Q2K0IKTyt6VWFJTTNSSkJydWc2dlNOb1c2d241Mlo2SlB3PT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
              enabled: true
              enforced: false
              insecureSkipVerify: true
            tolerations: []
            whiteListSourceRange: []
      valueOverrides: {}
    vault:
      name: vault
      namespace: default
      repo: ""
      branch: ""
      commit: ""
      version: 1.1.1
      syncedAt: 2018-12-31T12:37:09.424308042-05:00
      chart: helm.n5o.black/vault
      reportDeployment: false
      dependsOn:
      - traefik
      actions:
      - name: Test deploy
        when: AfterDeploy
        where: red,green
        maxAttempts: 5
        timeout: 5s
        interval: 5s
        test:
          http: https://vault.{{.Domain}}
      - name: Bootstrap vault
        when: AfterDeploy
        where: red,green
        exec: bosun vault bootstrap-dev
      - name: Configure vault/kube integration
        when: AfterDeploy
        vault:
          literal: |
            auth:
              kubernetes:
                type: kubernetes

            resources:
              /auth/kubernetes/config:
                comment: |
                  This wires up kubernetes authentication by pulling the kubernetes config values from
                  the cluster in ~/.kube/config.
                kubernetes_host: "{{ kube_server .Cluster }}"
                token_reviewer_jwt: "{{ kube_service_token .Cluster `vault-auth` }}"
                kubernetes_ca_cert: |
            {{ kube_ca_cert .Cluster | indent 6 }}

              /auth/kubernetes/role/devops:
                bound_service_account_names:
                  - devops
                bound_service_account_namespaces:
                  - "*"
                ttl: 60
                policies:
                  - admins
      values:
        blue:
          static:
            domain: n5o.red
            features:
              devInstance: false
            image:
              name: docker.n5o.black/public/vault-dev-jose
              tag: latest
            replicaCount: 1
            storage: 4Gi
        green:
          static:
            domain: n5o.red
            features:
              devInstance: true
            image:
              name: docker.n5o.black/public/vault-dev-jose
              tag: latest
            replicaCount: 1
            storage: 256Mi
        red:
          static:
            domain: n5o.red
            features:
              devInstance: true
            image:
              name: docker.n5o.black/public/vault-dev-jose
              tag: latest
            replicaCount: 1
            storage: 256Mi
      valueOverrides: {}
    zookeeper:
      name: zookeeper
      namespace: default
      repo: ""
      branch: ""
      commit: ""
      version: 1.1.2
      syncedAt: 2018-12-31T12:37:09.508884988-05:00
      chart: helm.n5o.black/zookeeper
      reportDeployment: false
      dependsOn: []
      actions: []
      values:
        blue:
          dynamic:
            image.name: docker.n5o.black/public/zookeeper
            image.tag: latest
          static:
            affinity: {}
            color: red
            env:
              JMXAUTH: "false"
              JMXDISABLE: "false"
              JMXPORT: 1099
              JMXSSL: "false"
              ZK_CLIENT_PORT: 2181
              ZK_ELECTION_PORT: 3888
              ZK_HEAP_SIZE: 2G
              ZK_INIT_LIMIT: 5
              ZK_LOG_LEVEL: INFO
              ZK_MAX_CLIENT_CNXNS: 60
              ZK_MAX_SESSION_TIMEOUT: 40000
              ZK_MIN_SESSION_TIMEOUT: 4000
              ZK_PURGE_INTERVAL: 0
              ZK_SERVER_PORT: 2888
              ZK_SNAP_RETAIN_COUNT: 3
              ZK_SYNC_LIMIT: 10
              ZK_TICK_TIME: 2000
            env.ZK_HEAP_SIZE: 1536M
            exporters:
              jmx:
                config:
                  lowercaseOutputName: false
                  rules:
                  - name: zookeeper_$2
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+)><>(\w+)
                  - labels:
                      replicaId: $2
                    name: zookeeper_$3
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+)><>(\w+)
                  - labels:
                      memberType: $3
                      replicaId: $2
                    name: zookeeper_$4
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+), name2=(\w+)><>(\w+)
                  - labels:
                      memberType: $3
                      replicaId: $2
                    name: zookeeper_$4_$5
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+), name2=(\w+), name3=(\w+)><>(\w+)
                  startDelaySeconds: 30
                enabled: true
                env: {}
                image:
                  pullPolicy: IfNotPresent
                  repository: sscaling/jmx-prometheus-exporter
                  tag: 0.3.0
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: jmxxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                path: /metrics
                ports:
                  jmxxp:
                    containerPort: 9404
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: jmxxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                resources: {}
              zookeeper:
                config:
                  logLevel: info
                  resetOnScrape: "true"
                enabled: true
                env: {}
                image:
                  pullPolicy: IfNotPresent
                  repository: josdotso/zookeeper-exporter
                  tag: v1.1.2
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: zookeeperxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                path: /metrics
                ports:
                  zookeeperxp:
                    containerPort: 9141
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: zookeeperxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                resources: {}
            fullNameOverride: zookeeper
            headless:
              annotations: {}
            image:
              name: docker.n5o.black/public/zookeeper
              pullPolicy: Always
              pullSecret: docker-n5o-black
              tag: latest
            jobs:
              chroots:
                activeDeadlineSeconds: 300
                backoffLimit: 5
                completions: 1
                config:
                  create: []
                enabled: false
                env: []
                parallelism: 1
                resources: {}
                restartPolicy: Never
            livenessProbe:
              exec:
                command:
                - zkOk.sh
              initialDelaySeconds: 20
            nodeSelector: {}
            persistence:
              accessMode: ReadWriteOnce
              enabled: true
              size: 5Gi
              storageClass: ssd
            podAnnotations: {}
            podDisruptionBudget:
              maxUnavailable: 1
            podLabels: {}
            ports:
              client:
                containerPort: 2181
                protocol: TCP
              election:
                containerPort: 3888
                protocol: TCP
              server:
                containerPort: 2888
                protocol: TCP
            priorityClassName: ""
            project: red
            readinessProbe:
              exec:
                command:
                - zkOk.sh
              initialDelaySeconds: 20
            replicaCount: 3
            resources:
              limits:
                memory: 2Gi
              requests:
                memory: 1Gi
            securityContext:
              fsGroup: 1000
              runAsUser: 1000
            service:
              annotations: {}
              ports:
                client:
                  port: 2181
                  protocol: TCP
                  targetPort: client
              type: ClusterIP
            terminationGracePeriodSeconds: 1800
            tolerations: []
            updateStrategy:
              type: OnDelete
        green:
          dynamic:
            image.name: docker.n5o.black/public/zookeeper
            image.tag: latest
          static:
            affinity: {}
            color: red
            env:
              JMXAUTH: "false"
              JMXDISABLE: "false"
              JMXPORT: 1099
              JMXSSL: "false"
              ZK_CLIENT_PORT: 2181
              ZK_ELECTION_PORT: 3888
              ZK_HEAP_SIZE: 2G
              ZK_INIT_LIMIT: 5
              ZK_LOG_LEVEL: INFO
              ZK_MAX_CLIENT_CNXNS: 60
              ZK_MAX_SESSION_TIMEOUT: 40000
              ZK_MIN_SESSION_TIMEOUT: 4000
              ZK_PURGE_INTERVAL: 0
              ZK_SERVER_PORT: 2888
              ZK_SNAP_RETAIN_COUNT: 3
              ZK_SYNC_LIMIT: 10
              ZK_TICK_TIME: 2000
            env.ZK_HEAP_SIZE: 800M
            exporters:
              jmx:
                config:
                  lowercaseOutputName: false
                  rules:
                  - name: zookeeper_$2
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+)><>(\w+)
                  - labels:
                      replicaId: $2
                    name: zookeeper_$3
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+)><>(\w+)
                  - labels:
                      memberType: $3
                      replicaId: $2
                    name: zookeeper_$4
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+), name2=(\w+)><>(\w+)
                  - labels:
                      memberType: $3
                      replicaId: $2
                    name: zookeeper_$4_$5
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+), name2=(\w+), name3=(\w+)><>(\w+)
                  startDelaySeconds: 30
                enabled: true
                env: {}
                image:
                  pullPolicy: IfNotPresent
                  repository: sscaling/jmx-prometheus-exporter
                  tag: 0.3.0
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: jmxxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                path: /metrics
                ports:
                  jmxxp:
                    containerPort: 9404
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: jmxxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                resources: {}
              zookeeper:
                config:
                  logLevel: info
                  resetOnScrape: "true"
                enabled: true
                env: {}
                image:
                  pullPolicy: IfNotPresent
                  repository: josdotso/zookeeper-exporter
                  tag: v1.1.2
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: zookeeperxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                path: /metrics
                ports:
                  zookeeperxp:
                    containerPort: 9141
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: zookeeperxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                resources: {}
            fullNameOverride: zookeeper
            headless:
              annotations: {}
            image:
              name: docker.n5o.black/public/zookeeper
              pullPolicy: Always
              pullSecret: docker-n5o-black
              tag: latest
            jobs:
              chroots:
                activeDeadlineSeconds: 300
                backoffLimit: 5
                completions: 1
                config:
                  create: []
                enabled: false
                env: []
                parallelism: 1
                resources: {}
                restartPolicy: Never
            livenessProbe:
              exec:
                command:
                - zkOk.sh
              initialDelaySeconds: 20
            nodeSelector: {}
            persistence:
              accessMode: ReadWriteOnce
              enabled: true
              size: 5Gi
              storageClass: ssd
            podAnnotations: {}
            podDisruptionBudget:
              maxUnavailable: 1
            podLabels: {}
            ports:
              client:
                containerPort: 2181
                protocol: TCP
              election:
                containerPort: 3888
                protocol: TCP
              server:
                containerPort: 2888
                protocol: TCP
            priorityClassName: ""
            project: red
            readinessProbe:
              exec:
                command:
                - zkOk.sh
              initialDelaySeconds: 20
            replicaCount: 3
            resources:
              limits:
                memory: 1Gi
              requests:
                memory: 1Gi
            securityContext:
              fsGroup: 1000
              runAsUser: 1000
            service:
              annotations: {}
              ports:
                client:
                  port: 2181
                  protocol: TCP
                  targetPort: client
              type: ClusterIP
            terminationGracePeriodSeconds: 1800
            tolerations: []
            updateStrategy:
              type: OnDelete
        red:
          dynamic:
            image.name: docker.n5o.black/public/zookeeper
            image.tag: latest
          static:
            affinity: {}
            color: red
            env:
              JMXAUTH: "false"
              JMXDISABLE: "false"
              JMXPORT: 1099
              JMXSSL: "false"
              ZK_CLIENT_PORT: 2181
              ZK_ELECTION_PORT: 3888
              ZK_HEAP_SIZE: 2G
              ZK_INIT_LIMIT: 5
              ZK_LOG_LEVEL: INFO
              ZK_MAX_CLIENT_CNXNS: 60
              ZK_MAX_SESSION_TIMEOUT: 40000
              ZK_MIN_SESSION_TIMEOUT: 4000
              ZK_PURGE_INTERVAL: 0
              ZK_SERVER_PORT: 2888
              ZK_SNAP_RETAIN_COUNT: 3
              ZK_SYNC_LIMIT: 10
              ZK_TICK_TIME: 2000
            env.ZK_HEAP_SIZE: 500M
            exporters:
              jmx:
                config:
                  lowercaseOutputName: false
                  rules:
                  - name: zookeeper_$2
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+)><>(\w+)
                  - labels:
                      replicaId: $2
                    name: zookeeper_$3
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+)><>(\w+)
                  - labels:
                      memberType: $3
                      replicaId: $2
                    name: zookeeper_$4
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+), name2=(\w+)><>(\w+)
                  - labels:
                      memberType: $3
                      replicaId: $2
                    name: zookeeper_$4_$5
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+), name2=(\w+), name3=(\w+)><>(\w+)
                  startDelaySeconds: 30
                enabled: true
                env: {}
                image:
                  pullPolicy: IfNotPresent
                  repository: sscaling/jmx-prometheus-exporter
                  tag: 0.3.0
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: jmxxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                path: /metrics
                ports:
                  jmxxp:
                    containerPort: 9404
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: jmxxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                resources: {}
              zookeeper:
                config:
                  logLevel: info
                  resetOnScrape: "true"
                enabled: true
                env: {}
                image:
                  pullPolicy: IfNotPresent
                  repository: josdotso/zookeeper-exporter
                  tag: v1.1.2
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: zookeeperxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                path: /metrics
                ports:
                  zookeeperxp:
                    containerPort: 9141
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: zookeeperxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                resources: {}
            fullNameOverride: zookeeper
            headless:
              annotations: {}
            image:
              name: docker.n5o.black/public/zookeeper
              pullPolicy: Always
              pullSecret: docker-n5o-black
              tag: latest
            jobs:
              chroots:
                activeDeadlineSeconds: 300
                backoffLimit: 5
                completions: 1
                config:
                  create: []
                enabled: false
                env: []
                parallelism: 1
                resources: {}
                restartPolicy: Never
            livenessProbe:
              exec:
                command:
                - zkOk.sh
              initialDelaySeconds: 20
            nodeSelector: {}
            persistence:
              accessMode: ReadWriteOnce
              enabled: true
              size: 5Gi
              storageClass: ssd
            podAnnotations: {}
            podDisruptionBudget:
              maxUnavailable: 1
            podLabels: {}
            ports:
              client:
                containerPort: 2181
                protocol: TCP
              election:
                containerPort: 3888
                protocol: TCP
              server:
                containerPort: 2888
                protocol: TCP
            priorityClassName: ""
            project: red
            readinessProbe:
              exec:
                command:
                - zkOk.sh
              initialDelaySeconds: 20
            replicaCount: 1
            resources:
              limits:
                memory: 512Mi
              requests:
                memory: 256Mi
            securityContext:
              fsGroup: 1000
              runAsUser: 1000
            service:
              annotations: {}
              ports:
                client:
                  port: 2181
                  protocol: TCP
                  targetPort: client
              type: ClusterIP
            terminationGracePeriodSeconds: 1800
            tolerations: []
            updateStrategy:
              type: OnDelete
      valueOverrides: {}
- name: 2019s1
  fromPath: /home/steve/src/github.com/naveegoinc/devops/releases/2019s1.yaml
  apps:
    go-between:
      name: go-between
      namespace: ""
      repo: naveegoinc/go-between
      branch: release/2019s1
      commit: 68e79ac
      version: 0.5.0
      syncedAt: 2018-12-30T15:37:02.394577009-05:00
      chart: helm.n5o.black/go-between
      image: docker.n5o.black/private/go-between
      imageTag: 0.5.0-2019s1
      reportDeployment: true
      dependsOn:
      - mongodb
      - vault
      - nats
      - kafka
      actions:
      - name: Vault setup
        when: BeforeDeploy
        vault:
          layout:
            auth: {}
            mounts: {}
            resources:
              /auth/approle/role/go-between-hub:
                comment: The approle for the hub to use when authenticating with a
                  wrapped token.
                period: 60m
                policies:
                - default
                - go-between-hub
              /auth/kubernetes/role/go-between-hub:
                bound_service_account_names: go-between-hub
                bound_service_account_namespaces: '*'
                period: 60m
                policies: go-between-hub
              /auth/kubernetes/role/go-between-ingestion:
                bound_service_account_names: go-between-ingestion
                bound_service_account_namespaces: '*'
                period: 60m
                policies: default
              /database/roles/mongodb-go-between:
                creation_statements: |
                  {
                    "db": "go-between",
                    "roles": [
                      {
                        "role": "readWrite",
                        "db": "go-between"
                      }
                    ]
                  }
                db_name: mongodb
                default_ttl: 1h
              /jose/roles/tenant-agent-naveego:
                allowed_custom_claims:
                - sub
                aud: naveego
                claims:
                  role: go-between-hub
                  tid: naveego
                comment: JOSE role for the hub to create JWT tokens for itself.
                key_set: auth
                type: jwt
            policies:
              go-between-hub: |
                path "database/creds/mongodb-go-between" {
                  capabilities = ["read"]
                }

                path "auth/token/lookup-self" {
                  capabilities = ["read"]
                }

                path "tenant-secrets/*" {
                  capabilities = [ "create", "update", "delete" ]
                }

                path "auth/approle/role/tenant-agent-*" {
                  capabilities = ["create","update","read"]
                  allowed_parameters = {
                    "policies" = [["go-between-tenant-agent"]]
                    "period" = []
                  }
                }

                path "jose/roles/tenant-agent-*" {
                  capabilities = ["create","update","read"]
                }

                path "jose/jwt/issue/tenant-agent-naveego" {
                  capabilities = ["create","update","read"]
                }

                path "jose/jwt/issue/go-between-hub" {
                  capabilities = ["create","update","read"]
                }

                // Search for entities
                path "identity/lookup/entity" {
                  capabilities = ["create","update"]
                }

                path "identity/entity" {
                  capabilities = ["create","update","read"]
                  allowed_parameters = {
                    "name" = []
                    "metadata" = []
                    "policies" = [["go-between-tenant-agent"]]
                  }
                }

                path "identity/entity-alias" {
                  capabilities = ["create","update","read"]
                  allowed_parameters = {
                    "name" = []
                    "canonical_id" = []
                    "metadata" = []
                    "mount_accessor" = []
                  }
                }

                // Get the credentials for using S3.
                path "aws/creds/s3-navget" {
                  capabilities = ["read"]
                }

                // Ability to list auth systems, so hub can find the mount accessor for
                // the approle auth method and create entity aliases against it.
                path "sys/auth" {
                  capabilities =["read"]
                }
              go-between-tenant-agent: |
                path "tenant-secrets/{{`{{`}}identity.entity.metadata.tid}}/*" {
                  capabilities = [ "create", "update", "delete", "read"]
                }

                path "tenant-secrets/agent/{{`{{`}}identity.entity.name}}/*" {
                  capabilities = [ "create", "update", "delete","read"]
                }

                path "jose/jwt/issue/tenant-agent-{{`{{`}}identity.entity.metadata.tid}}" {
                  capabilities = ["create","update","read"]
                }

                path "auth/token/lookup-self" {
                  capabilities = [ "read"]
                }
      values:
        blue:
          dynamic:
            mongodb: mongodb://(vault://naveego-secrets/mongodb/go-between?template={{`{{`}}.username{{`}}`}}:{{`{{`}}.password{{`}}`}})@mongodb:27017/go-between?readPreference=primary
          static:
            domain: n5o.green
            kafka: kafka:9092
            mongodb: mongodb://(vault://database/creds/mongodb-go-between?template={{`{{`}}.username{{`}}`}}:{{`{{`}}.password{{`}}`}})@mongodb:27017/go-between?readPreference=primary
            nats: nats://nats-nats-client:4222
            replicaCount: 1
            routeToHost: false
            tag: 0.5.0
            vault: http://vault
      valueOverrides: {}
    kafka:
      name: kafka
      namespace: default
      repo: ""
      branch: ""
      commit: ""
      version: 0.8.7
      syncedAt: 2018-12-30T15:37:06.090500545-05:00
      chart: helm.n5o.black/kafka
      reportDeployment: false
      dependsOn:
      - zookeeper
      actions: []
      values:
        blue:
          dynamic:
            manager.auth.htpasswd: |
              kafkaManagerPassword=$(bosun lastpass password Shared-Blue/blue-kafka-admin admin https://kafka.n5o.blue)
              defaultPassword=$(htpasswd -nb admin $kafkaManagerPassword)
              bosun vault secret naveego-secrets/kafka/password-secret htpasswd --default $defaultPassword | base64
            manager.auth.secretName: kafka-manager-auth
          static:
            additionalPorts: {}
            affinity: {}
            configurationOverrides:
              offsets.topic.replication.factor: 3
            domain: n5o.blue
            external:
              distinct: false
              domain: cluster.local
              enabled: false
              firstListenerPort: 31090
              init:
                image: lwolf/kubectl_deployer
                imagePullPolicy: IfNotPresent
                imageTag: "0.4"
              servicePort: 19092
              type: NodePort
            fullnameOverride: kafka
            headless:
              port: 9092
            image: confluentinc/cp-kafka
            imagePullPolicy: IfNotPresent
            imageTag: 4.1.1-2
            jmx:
              configMap:
                enabled: true
                overrideConfig: {}
                overrideName: ""
              port: 5555
              whitelistObjectNames:
              - kafka.controller:*
              - kafka.server:*
              - java.lang:*
              - kafka.network:*
              - kafka.log:*
            kafkaHeapOptions: -Xmx1G -Xms1G
            logSubPath: logs
            manager:
              auth:
                enabled: true
                htpasswd: null
                secretName: kafka-manager-auth
            nodeSelector: {}
            persistence:
              enabled: true
              size: 256Gi
              storageClass: ssd
            podManagementPolicy: OrderedReady
            prometheus:
              jmx:
                enabled: true
                image: solsson/kafka-prometheus-jmx-exporter@sha256
                imageTag: a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8
                interval: 10s
                port: 5556
                resources: {}
              kafka:
                enabled: true
                image: danielqsj/kafka-exporter
                imageTag: v1.2.0
                interval: 10s
                port: 9308
                resources: {}
              operator:
                enabled: false
                serviceMonitor:
                  namespace: monitoring
                  selector:
                    prometheus: kube-prometheus
            rbac:
              enabled: true
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replicas: 3
            resources:
              limits:
                memory: 2Gi
              requests:
                memory: 2Gi
            storageClass: ssd
            terminationGracePeriodSeconds: 60
            tolerations: []
            topics: []
            updateStrategy:
              type: OnDelete
            zookeeper:
              affinity: {}
              enabled: false
              env:
                ZK_HEAP_SIZE: 1G
              image:
                PullPolicy: IfNotPresent
              persistence:
                enabled: false
              port: 2181
              resources: null
              url: zookeeper-0.zookeeper-headless:2181,zookeeper-1.zookeeper-headless:2181,zookeeper-2.zookeeper-headless
        green:
          dynamic:
            manager.auth.htpasswd: "# generate or get the password from lastpass\nkafkaManagerPassword=$(bosun
              lastpass password Shared-Green/green-kafka-admin admin https://kafka.n5o.green)\n#
              hash the password \ndefaultPassword=$(htpasswd -nb admin $kafkaManagerPassword)\n#
              Get the hashed password from vault\n# If vault doesn't know the hashed
              password, it will be set and returned\n# The hashed password is stored
              in vault so that we don't change the hashed password\n# on every deploy
              (htpasswd uses a different salt each time, so if we didn't cache \n#
              the hashed password in vault, the chart would appear to be changing
              every time this is run).\nbosun vault secret naveego-secrets/kafka/password-secret
              htpasswd --default $defaultPassword | base64\n"
            manager.auth.secretName: kafka-manager-auth
          static:
            additionalPorts: {}
            affinity: {}
            configurationOverrides:
              offsets.topic.replication.factor: 3
            domain: n5o.green
            external:
              distinct: false
              domain: cluster.local
              enabled: false
              firstListenerPort: 31090
              init:
                image: lwolf/kubectl_deployer
                imagePullPolicy: IfNotPresent
                imageTag: "0.4"
              servicePort: 19092
              type: NodePort
            fullnameOverride: kafka
            headless:
              port: 9092
            image: confluentinc/cp-kafka
            imagePullPolicy: IfNotPresent
            imageTag: 4.1.1-2
            jmx:
              configMap:
                enabled: true
                overrideConfig: {}
                overrideName: ""
              port: 5555
              whitelistObjectNames:
              - kafka.controller:*
              - kafka.server:*
              - java.lang:*
              - kafka.network:*
              - kafka.log:*
            kafkaHeapOptions: -Xmx1G -Xms1G
            logSubPath: logs
            manager:
              auth:
                enabled: true
                htpasswd: null
                secretName: kafka-manager-auth
            nodeSelector: {}
            persistence:
              enabled: true
              size: 64Gi
              storageClass: ssd
            podManagementPolicy: OrderedReady
            prometheus:
              jmx:
                enabled: true
                image: solsson/kafka-prometheus-jmx-exporter@sha256
                imageTag: a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8
                interval: 10s
                port: 5556
                resources: {}
              kafka:
                enabled: true
                image: danielqsj/kafka-exporter
                imageTag: v1.2.0
                interval: 10s
                port: 9308
                resources: {}
              operator:
                enabled: false
                serviceMonitor:
                  namespace: monitoring
                  selector:
                    prometheus: kube-prometheus
            rbac:
              enabled: true
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replicas: 3
            resources:
              limits:
                memory: 1Gi
              requests:
                memory: 1Gi
            storageClass: ssd
            terminationGracePeriodSeconds: 60
            tolerations: []
            topics: []
            updateStrategy:
              type: OnDelete
            zookeeper:
              affinity: {}
              enabled: false
              env:
                ZK_HEAP_SIZE: 1G
              image:
                PullPolicy: IfNotPresent
              persistence:
                enabled: false
              port: 2181
              resources: null
              url: zookeeper-0.zookeeper-headless:2181,zookeeper-1.zookeeper-headless:2181,zookeeper-2.zookeeper-headless
        red:
          dynamic:
            metrics.enabled: "false"
            serviceDomain: n5o.red
          static:
            additionalPorts: {}
            affinity: {}
            configurationOverrides:
              offsets.topic.replication.factor: 1
            domain: n5o.red
            external:
              enabled: true
              firstListenerPort: 3100
              servicePort: 9092
            fullnameOverride: kafka
            headless:
              port: 9092
            image: confluentinc/cp-kafka
            imagePullPolicy: IfNotPresent
            imageTag: 4.1.1-2
            jmx:
              configMap:
                enabled: true
                overrideConfig: {}
                overrideName: ""
              port: 5555
              whitelistObjectNames:
              - kafka.controller:*
              - kafka.server:*
              - java.lang:*
              - kafka.network:*
              - kafka.log:*
            kafkaHeapOptions: -Xmx512M -Xms312M
            logSubPath: logs
            manager:
              auth:
                enabled: false
            nodeSelector: {}
            persistence:
              enabled: true
              size: 1Gi
              storageClass: ssd
            podManagementPolicy: OrderedReady
            prometheus:
              jmx:
                enabled: true
                image: solsson/kafka-prometheus-jmx-exporter@sha256
                imageTag: a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8
                interval: 10s
                port: 5556
                resources: {}
              kafka:
                enabled: true
                image: danielqsj/kafka-exporter
                imageTag: v1.2.0
                interval: 10s
                port: 9308
                resources: {}
              operator:
                enabled: false
                serviceMonitor:
                  namespace: monitoring
                  selector:
                    prometheus: kube-prometheus
            rbac:
              enabled: true
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replicas: 1
            resources:
              limits:
                memory: 1024Mi
              requests:
                memory: 512Mi
            storageClass: ssd
            terminationGracePeriodSeconds: 60
            tolerations: []
            topics: []
            updateStrategy:
              type: OnDelete
            zookeeper:
              port: 2181
              url: zookeeper-headless
      valueOverrides: {}
    mongodb:
      name: mongodb
      namespace: default
      repo: ""
      branch: ""
      commit: ""
      version: 3.5.3
      syncedAt: 2018-12-30T15:37:05.856312952-05:00
      chart: helm.n5o.black/mongodb
      reportDeployment: false
      dependsOn: []
      actions:
      - name: Configure vault/mongo integration
        when: AfterDeploy
        where: red,green
        maxAttempts: 3
        timeout: 5s
        interval: 10s
        vault:
          literal: |
            resources:
              # This configures the secret engine mount.
              # The connection string must use a host name which is resolvable by the Vault instance in the environment.
              /database/config/mongodb:
                "plugin_name": "mongodb-database-plugin"
                "connection_url": "mongodb://{{`{{`}}username}}:{{`{{`}}password}}@mongodb:27017"
                "allowed_roles": "*"
                "username": "{{ .Values.auth.adminUser }}"
                "password": "{{ .Values.auth.adminPassword }}"

              # This creates an admin role which can be checked out.
              /database/roles/mongodb-admin:
                "db_name": "mongodb"
                "default_ttl": "1h"
                "creation_statements": |
                  {
                      "db": "admin",
                      "roles": [
                          {
                              "role": "userAdminAnyDatabase",
                              "db": "admin"
                          },
                          {
                              "role": "readWriteAnyDatabase",
                              "db": "admin"
                          }
                      ]
                  }
      values:
        blue:
          dynamic:
            auth.adminPassword: |
              bosun vault secret naveego-secrets/mongodb/default/admin-password password --generate
            auth.adminUser: nvgoadmin
            auth.enabled: "true"
            auth.key: |
              bosun vault secret naveego-secrets/mongodb/default/auth-key key --generate
            auth.metricsPassword: |
              bosun vault secret naveego-secrets/mongodb/default/metrics-password password --generate
            auth.metricsUser: metricsuser
            domain: n5o.blue
            metrics.enabled: "true"
          static:
            affinity: {}
            auth:
              adminPassword: rootpassword
              adminUser: nvgoadmin
              enabled: true
              key: 3523331693f0485a8227837ec6bcc664
              metricsPassword: 132c7ffa-974a-49fd-bcf9-f64ad9d3f3cf
              metricsUser: metricsuser
            configmap: null
            domain: n5o.green
            extraLabels: {}
            extraVars: {}
            fullnameOverride: mongodb
            image:
              pullPolicy: IfNotPresent
              repository: mongo
              tag: 3.6
            installImage:
              pullPolicy: IfNotPresent
              repository: k8s.gcr.io/mongodb-install
              tag: 0.6
            isolateToNamespace: false
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            metrics:
              enabled: true
              path: /metrics
              port: 9216
              prometheusServiceDiscovery: true
              resources: {}
              socketTimeout: 3s
              syncTimeout: 1m
            nodeName: mongo
            nodeSelector: {}
            persistentVolume:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: true
              size: 125Gi
              storageClass: ssd
            podAnnotations: {}
            podDisruptionBudget: {}
            port: 27017
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            replicaSetName: rs0
            replicas: 3
            resources: {}
            securityContext:
              fsGroup: 999
              runAsNonRoot: true
              runAsUser: 999
            serviceAnnotations: {}
            tls:
              enabled: false
            tolerations: []
        green:
          dynamic:
            auth.adminPassword: |
              bosun vault secret naveego-secrets/mongodb/default/admin-password password --generate
            auth.adminUser: nvgoadmin
            auth.enabled: "true"
            auth.key: |
              bosun vault secret naveego-secrets/mongodb/default/auth-key key --generate
            auth.metricsPassword: |
              bosun vault secret naveego-secrets/mongodb/default/metrics-password password --generate
            auth.metricsUser: metricsuser
            domain: n5o.green
            metrics.enabled: "true"
          static:
            affinity: {}
            auth:
              adminPassword: rootpassword
              adminUser: nvgoadmin
              enabled: true
              key: 3523331693f0485a8227837ec6bcc664
              metricsPassword: 132c7ffa-974a-49fd-bcf9-f64ad9d3f3cf
              metricsUser: metricsuser
            configmap: null
            domain: n5o.green
            extraLabels: {}
            extraVars: {}
            fullnameOverride: mongodb
            image:
              pullPolicy: IfNotPresent
              repository: mongo
              tag: 3.6
            installImage:
              pullPolicy: IfNotPresent
              repository: k8s.gcr.io/mongodb-install
              tag: 0.6
            isolateToNamespace: false
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            metrics:
              enabled: true
              path: /metrics
              port: 9216
              prometheusServiceDiscovery: true
              resources: {}
              socketTimeout: 3s
              syncTimeout: 1m
            nodeName: mongo
            nodeSelector: {}
            persistentVolume:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: true
              size: 100Gi
              storageClass: ssd
            podAnnotations: {}
            podDisruptionBudget: {}
            port: 27017
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            replicaSetName: rs0
            replicas: 1
            resources: {}
            securityContext:
              fsGroup: 999
              runAsNonRoot: true
              runAsUser: 999
            serviceAnnotations: {}
            tls:
              enabled: false
            tolerations: []
        red:
          dynamic:
            auth.adminPassword: |
              bosun vault secret naveego-secrets/mongodb/default/admin-password password --generate
            auth.adminUser: nvgoadmin
            auth.enabled: "true"
            auth.key: |
              bosun vault secret naveego-secrets/mongodb/default/auth-key key --generate
            auth.metricsPassword: |
              bosun vault secret naveego-secrets/mongodb/default/metrics-password password --generate
            auth.metricsUser: metricsuser
            domain: n5o.red
            metrics.enabled: "false"
          static:
            affinity: {}
            auth:
              adminPassword: rootpassword
              adminUser: nvgoadmin
              enabled: true
              key: 3523331693f0485a8227837ec6bcc664
              metricsPassword: 132c7ffa-974a-49fd-bcf9-f64ad9d3f3cf
              metricsUser: metricsuser
            configmap: null
            domain: n5o.green
            extraLabels: {}
            extraVars: {}
            fullnameOverride: mongodb
            image:
              pullPolicy: IfNotPresent
              repository: mongo
              tag: 3.6
            installImage:
              pullPolicy: IfNotPresent
              repository: k8s.gcr.io/mongodb-install
              tag: 0.6
            isolateToNamespace: false
            livenessProbe:
              failureThreshold: 3
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            metrics:
              enabled: true
              path: /metrics
              port: 9216
              prometheusServiceDiscovery: true
              resources: {}
              socketTimeout: 3s
              syncTimeout: 1m
            nodeName: mongo
            nodeSelector: {}
            persistentVolume:
              accessModes:
              - ReadWriteOnce
              annotations: {}
              enabled: true
              size: 512Mi
              storageClass: ssd
            podAnnotations: {}
            podDisruptionBudget: {}
            port: 27017
            readinessProbe:
              failureThreshold: 3
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            replicaSetName: rs0
            replicas: 1
            resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 100m
                memory: 256Mi
            securityContext:
              fsGroup: 999
              runAsNonRoot: true
              runAsUser: 999
            serviceAnnotations: {}
            tls:
              enabled: false
            tolerations: []
      valueOverrides: {}
    nats:
      name: nats
      namespace: default
      repo: ""
      branch: ""
      commit: ""
      version: 0.0.6
      syncedAt: 2018-12-30T15:37:06.002494385-05:00
      chart: helm.n5o.black/nats
      reportDeployment: false
      dependsOn: []
      actions: []
      values:
        blue:
          dynamic:
            chadburn.image.name: docker.n5o.black/public/chadburn
            chadburn.image.tag: 1.1.1
            chadburn.keyDiscoveryURL: https://auth.n5o.blue/discovery/keys
            image.registry: docker.io
            image.repository: bitnami/nats
            image.tag: 1.1.0
          static:
            antiAffinity: soft
            auth:
              enabled: false
              user: nats_client
            chadburn:
              image:
                name: docker.n5o.black/public/chadburn
                tag: 1.1.1
              keyDiscoveryURL: https://login.naveegonext.com/discovery/keys
              verbose: "true"
            clientService:
              annotations: {}
              port: 4222
              type: ClusterIP
            clusterAuth:
              enabled: false
              user: nats_cluster
            clusterService:
              annotations: {}
              port: 6222
              type: ClusterIP
            debug:
              enabled: false
              logtime: false
              trace: false
            image:
              pullPolicy: Always
              registry: docker.io
              repository: bitnami/nats
              tag: 1.1.0
            ingress:
              enabled: false
              hosts:
              - annotations: null
                name: nats.local
                tls: false
                tlsSecret: nats.local-tls
              secrets: null
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            maxConnections: 100
            maxControlLine: 512
            maxPayload: 131072
            monitoringService:
              annotations: {}
              loadBalancerIP: null
              port: 8222
              type: ClusterIP
            networkPolicy:
              allowExternal: false
              enabled: true
            podAnnotations: {}
            podLabels: {}
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replicaCount: 3
            resources:
              limits:
                cpu: 500m
                memory: 1024Mi
              requests:
                cpu: 100m
                memory: 512Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            sidecars: null
            statefulset:
              updateStrategy: RollingUpdate
            writeDeadline: 2s
        green:
          dynamic:
            chadburn.image.name: docker.n5o.black/public/chadburn
            chadburn.image.tag: 1.1.1
            chadburn.keyDiscoveryURL: http://auth/discovery/keys
            image.registry: docker.io
            image.repository: bitnami/nats
            image.tag: 1.1.0
          static:
            antiAffinity: soft
            auth:
              enabled: false
              user: nats_client
            chadburn:
              image:
                name: docker.n5o.black/public/chadburn
                tag: 1.1.1
              keyDiscoveryURL: https://login.naveegonext.com/discovery/keys
              verbose: "true"
            clientService:
              annotations: {}
              port: 4222
              type: ClusterIP
            clusterAuth:
              enabled: false
              user: nats_cluster
            clusterService:
              annotations: {}
              port: 6222
              type: ClusterIP
            debug:
              enabled: false
              logtime: false
              trace: false
            image:
              pullPolicy: Always
              registry: docker.io
              repository: bitnami/nats
              tag: 1.1.0
            ingress:
              enabled: false
              hosts:
              - annotations: null
                name: nats.local
                tls: false
                tlsSecret: nats.local-tls
              secrets: null
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            maxConnections: 100
            maxControlLine: 512
            maxPayload: 131072
            monitoringService:
              annotations: {}
              loadBalancerIP: null
              port: 8222
              type: ClusterIP
            networkPolicy:
              allowExternal: false
              enabled: true
            podAnnotations: {}
            podLabels: {}
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replicaCount: 3
            resources:
              limits:
                cpu: 500m
                memory: 1024Mi
              requests:
                cpu: 100m
                memory: 512Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            sidecars: null
            statefulset:
              updateStrategy: RollingUpdate
            writeDeadline: 2s
        red:
          dynamic:
            chadburn.image.name: docker.n5o.black/public/chadburn
            chadburn.image.tag: 1.1.1
            chadburn.keyDiscoveryURL: http://auth/discovery/keys
            image.registry: docker.io
            image.repository: bitnami/nats
            image.tag: 1.1.0
          static:
            antiAffinity: soft
            auth:
              enabled: false
              user: nats_client
            chadburn:
              image:
                name: docker.n5o.black/public/chadburn
                tag: 1.1.1
              keyDiscoveryURL: https://login.naveegonext.com/discovery/keys
              verbose: "true"
            clientService:
              annotations: {}
              port: 4222
              type: ClusterIP
            clusterAuth:
              enabled: false
              user: nats_cluster
            clusterService:
              annotations: {}
              port: 6222
              type: ClusterIP
            debug:
              enabled: false
              logtime: false
              trace: false
            image:
              pullPolicy: Always
              registry: docker.io
              repository: bitnami/nats
              tag: 1.1.0
            ingress:
              enabled: false
              hosts:
              - annotations: null
                name: nats.local
                tls: false
                tlsSecret: nats.local-tls
              secrets: null
            livenessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            maxConnections: 100
            maxControlLine: 512
            maxPayload: 131072
            monitoringService:
              annotations: {}
              loadBalancerIP: null
              port: 8222
              type: ClusterIP
            networkPolicy:
              allowExternal: false
              enabled: true
            podAnnotations: {}
            podLabels: {}
            readinessProbe:
              enabled: true
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 5
            replicaCount: 1
            resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 100m
                memory: 256Mi
            securityContext:
              enabled: true
              fsGroup: 1001
              runAsUser: 1001
            sidecars: null
            statefulset:
              updateStrategy: RollingUpdate
            writeDeadline: 2s
      valueOverrides: {}
    traefik:
      name: traefik
      namespace: kube-system
      repo: ""
      branch: ""
      commit: ""
      version: 1.35.0
      syncedAt: 2018-12-30T15:37:05.908585709-05:00
      chart: helm.n5o.black/traefik
      reportDeployment: false
      dependsOn: []
      actions:
      - name: Test dashboard
        when: AfterDeploy
        maxAttempts: 5
        timeout: 5s
        interval: 5s
        test:
          http: https://traefik.{{ .Domain }}
      values:
        blue:
          static:
            accessLogs:
              enabled: true
            acme:
              challengeType: tls-sni-01
              dnsProvider:
                auroradns:
                  AURORA_ENDPOINT: ""
                  AURORA_KEY: ""
                  AURORA_USER_ID: ""
                azure:
                  AZURE_CLIENT_ID: ""
                  AZURE_CLIENT_SECRET: ""
                  AZURE_RESOURCE_GROUP: ""
                  AZURE_SUBSCRIPTION_ID: ""
                  AZURE_TENANT_ID: ""
                cloudflare:
                  CLOUDFLARE_API_KEY: ""
                  CLOUDFLARE_EMAIL: ""
                digitalocean:
                  DO_AUTH_TOKEN: ""
                dnsimple:
                  DNSIMPLE_BASE_URL: ""
                  DNSIMPLE_OAUTH_TOKEN: ""
                dnsmadeeasy:
                  DNSMADEEASY_API_KEY: ""
                  DNSMADEEASY_API_SECRET: ""
                  DNSMADEEASY_SANDBOX: ""
                dnspod:
                  DNSPOD_API_KEY: ""
                dyn:
                  DYN_CUSTOMER_NAME: ""
                  DYN_PASSWORD: ""
                  DYN_USER_NAME: ""
                exoscale:
                  EXOSCALE_API_KEY: ""
                  EXOSCALE_API_SECRET: ""
                  EXOSCALE_ENDPOINT: ""
                gandi:
                  GANDI_API_KEY: ""
                gcloud:
                  GCE_PROJECT: ""
                  GCE_SERVICE_ACCOUNT_FILE: ""
                godaddy:
                  GODADDY_API_KEY: ""
                  GODADDY_API_SECRET: ""
                linode:
                  LINODE_API_KEY: ""
                name: nil
                namecheap:
                  NAMECHEAP_API_KEY: ""
                  NAMECHEAP_API_USER: ""
                ns1:
                  NS1_API_KEY: ""
                otc:
                  OTC_DOMAIN_NAME: ""
                  OTC_IDENTITY_ENDPOINT: ""
                  OTC_PASSWORD: ""
                  OTC_PROJECT_NAME: ""
                  OTC_USER_NAME: ""
                pdns:
                  PDNS_API_URL: ""
                rackspace:
                  RACKSPACE_API_KEY: ""
                  RACKSPACE_USER: ""
                rfc2136:
                  RFC2136_NAMESERVER: ""
                  RFC2136_TIMEOUT: ""
                  RFC2136_TSIG_ALGORITHM: ""
                  RFC2136_TSIG_KEY: ""
                  RFC2136_TSIG_SECRET: ""
                route53:
                  AWS_ACCESS_KEY_ID: ""
                  AWS_REGION: ""
                  AWS_SECRET_ACCESS_KEY: ""
                vultr:
                  VULTR_API_KEY: ""
              domains:
                domainsList: null
                enabled: false
              email: admin@example.com
              enabled: false
              logging: false
              persistence:
                accessMode: ReadWriteOnce
                annotations: {}
                enabled: true
                size: 1Gi
              staging: true
            affinity: {}
            cpuLimit: 250m
            cpuRequest: 100m
            dashboard:
              auth:
                basic:
                  admin: $apr1$JcpMkt9m$nxSYGE6rGRd8jNTPLZMg4/
                  monitor: $apr1$lOzKJ8Fv$r5kXQiDZXlIq1jRsdpHOE1
              domain: traefik.n5o.blue
              enabled: true
              ingress: null
              service: null
              statistics: null
            debug:
              enabled: false
            deployment:
              hostPort:
                dashboardEnabled: false
                httpEnabled: false
                httpsEnabled: false
            deploymentStrategy: {}
            externalTrafficPolicy: Cluster
            gzip:
              enabled: true
            image: traefik
            imageTag: 1.7.6
            kubernetes:
              namespaces:
              - default
              - logging
              - kube-system
            loadBalancerIP: null
            loadBalancerSourceRanges: []
            memoryLimit: 512Mi
            memoryRequest: 256Mi
            metrics:
              datadog:
                enabled: false
              prometheus:
                buckets:
                - 0.1
                - 0.3
                - 0.5
                - 0.8
                - 1
                - 2
                - 5
                enabled: true
              statsd:
                enabled: false
            nodeSelector: {}
            podDisruptionBudget: {}
            proxyProtocol:
              enabled: false
              trustedIPs: null
            rbac:
              enabled: true
            replicas: 3
            sendAnonymousUsage: false
            service:
              annotations:
                service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
                service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:759703860832:certificate/9b11a3d8-d52d-403a-87cd-966e13266a67
                service.beta.kubernetes.io/aws-load-balancer-ssl-ports: 443,8080
              nodePorts:
                http: ""
                https: ""
            serviceType: LoadBalancer
            ssl:
              enabled: false
              enforced: true
            tolerations: []
            whiteListSourceRange: false
        green:
          static:
            accessLogs:
              enabled: true
              format: common
            acme:
              challengeType: tls-sni-01
              dnsProvider:
                auroradns:
                  AURORA_ENDPOINT: ""
                  AURORA_KEY: ""
                  AURORA_USER_ID: ""
                azure:
                  AZURE_CLIENT_ID: ""
                  AZURE_CLIENT_SECRET: ""
                  AZURE_RESOURCE_GROUP: ""
                  AZURE_SUBSCRIPTION_ID: ""
                  AZURE_TENANT_ID: ""
                cloudflare:
                  CLOUDFLARE_API_KEY: ""
                  CLOUDFLARE_EMAIL: ""
                digitalocean:
                  DO_AUTH_TOKEN: ""
                dnsimple:
                  DNSIMPLE_BASE_URL: ""
                  DNSIMPLE_OAUTH_TOKEN: ""
                dnsmadeeasy:
                  DNSMADEEASY_API_KEY: ""
                  DNSMADEEASY_API_SECRET: ""
                  DNSMADEEASY_SANDBOX: ""
                dnspod:
                  DNSPOD_API_KEY: ""
                dyn:
                  DYN_CUSTOMER_NAME: ""
                  DYN_PASSWORD: ""
                  DYN_USER_NAME: ""
                exoscale:
                  EXOSCALE_API_KEY: ""
                  EXOSCALE_API_SECRET: ""
                  EXOSCALE_ENDPOINT: ""
                gandi:
                  GANDI_API_KEY: ""
                gcloud:
                  GCE_PROJECT: ""
                  GCE_SERVICE_ACCOUNT_FILE: ""
                godaddy:
                  GODADDY_API_KEY: ""
                  GODADDY_API_SECRET: ""
                linode:
                  LINODE_API_KEY: ""
                name: nil
                namecheap:
                  NAMECHEAP_API_KEY: ""
                  NAMECHEAP_API_USER: ""
                ns1:
                  NS1_API_KEY: ""
                otc:
                  OTC_DOMAIN_NAME: ""
                  OTC_IDENTITY_ENDPOINT: ""
                  OTC_PASSWORD: ""
                  OTC_PROJECT_NAME: ""
                  OTC_USER_NAME: ""
                pdns:
                  PDNS_API_URL: ""
                rackspace:
                  RACKSPACE_API_KEY: ""
                  RACKSPACE_USER: ""
                rfc2136:
                  RFC2136_NAMESERVER: ""
                  RFC2136_TIMEOUT: ""
                  RFC2136_TSIG_ALGORITHM: ""
                  RFC2136_TSIG_KEY: ""
                  RFC2136_TSIG_SECRET: ""
                route53:
                  AWS_ACCESS_KEY_ID: ""
                  AWS_REGION: ""
                  AWS_SECRET_ACCESS_KEY: ""
                vultr:
                  VULTR_API_KEY: ""
              domains:
                domainsList: null
                enabled: false
              email: admin@example.com
              enabled: false
              logging: false
              persistence:
                accessMode: ReadWriteOnce
                annotations: {}
                enabled: true
                size: 1Gi
              staging: true
            affinity: {}
            cpuLimit: 250m
            cpuRequest: 100m
            dashboard:
              auth: null
              domain: traefik.n5o.green
              enabled: true
              ingress: null
              service: null
              statistics:
                recentErrors: 20
            debug:
              enabled: true
            deployment:
              hostPort:
                dashboardEnabled: false
                httpEnabled: false
                httpsEnabled: false
            deploymentStrategy: {}
            externalTrafficPolicy: Cluster
            gzip:
              enabled: true
            image: traefik
            imageTag: 1.7.6
            kubernetes:
              namespaces:
              - default
              - logging
              - kube-system
            loadBalancerIP: null
            loadBalancerSourceRanges:
            - 192.168.14.0/24
            - 10.200.100.0/24
            - 10.200.101.0/24
            - 10.200.102.0/24
            - 10.200.0.0/24
            - 10.200.1.0/24
            - 10.200.2.0/24
            memoryLimit: 512Mi
            memoryRequest: 256Mi
            metrics:
              datadog:
                enabled: false
              prometheus:
                buckets:
                - 0.1
                - 0.3
                - 0.5
                - 0.8
                - 1
                - 2
                - 5
                enabled: true
              statsd:
                enabled: false
            nodeSelector: {}
            podDisruptionBudget: {}
            proxyProtocol:
              enabled: false
              trustedIPs: null
            rbac:
              enabled: true
            replicas: 1
            sendAnonymousUsage: false
            service:
              annotations:
                service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
                service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:696021726152:certificate/cc0b9b7b-af79-44a2-8828-95acdbbaccc6
            serviceType: LoadBalancer
            ssl:
              enabled: false
              enforced: true
            tolerations: []
            whiteListSourceRange: false
        red:
          static:
            accessLogs:
              enabled: false
              format: common
            acme:
              challengeType: tls-sni-01
              dnsProvider:
                auroradns:
                  AURORA_ENDPOINT: ""
                  AURORA_KEY: ""
                  AURORA_USER_ID: ""
                azure:
                  AZURE_CLIENT_ID: ""
                  AZURE_CLIENT_SECRET: ""
                  AZURE_RESOURCE_GROUP: ""
                  AZURE_SUBSCRIPTION_ID: ""
                  AZURE_TENANT_ID: ""
                cloudflare:
                  CLOUDFLARE_API_KEY: ""
                  CLOUDFLARE_EMAIL: ""
                digitalocean:
                  DO_AUTH_TOKEN: ""
                dnsimple:
                  DNSIMPLE_BASE_URL: ""
                  DNSIMPLE_OAUTH_TOKEN: ""
                dnsmadeeasy:
                  DNSMADEEASY_API_KEY: ""
                  DNSMADEEASY_API_SECRET: ""
                  DNSMADEEASY_SANDBOX: ""
                dnspod:
                  DNSPOD_API_KEY: ""
                dyn:
                  DYN_CUSTOMER_NAME: ""
                  DYN_PASSWORD: ""
                  DYN_USER_NAME: ""
                exoscale:
                  EXOSCALE_API_KEY: ""
                  EXOSCALE_API_SECRET: ""
                  EXOSCALE_ENDPOINT: ""
                gandi:
                  GANDI_API_KEY: ""
                gcloud:
                  GCE_PROJECT: ""
                  GCE_SERVICE_ACCOUNT_FILE: ""
                godaddy:
                  GODADDY_API_KEY: ""
                  GODADDY_API_SECRET: ""
                linode:
                  LINODE_API_KEY: ""
                name: nil
                namecheap:
                  NAMECHEAP_API_KEY: ""
                  NAMECHEAP_API_USER: ""
                ns1:
                  NS1_API_KEY: ""
                otc:
                  OTC_DOMAIN_NAME: ""
                  OTC_IDENTITY_ENDPOINT: ""
                  OTC_PASSWORD: ""
                  OTC_PROJECT_NAME: ""
                  OTC_USER_NAME: ""
                pdns:
                  PDNS_API_URL: ""
                rackspace:
                  RACKSPACE_API_KEY: ""
                  RACKSPACE_USER: ""
                rfc2136:
                  RFC2136_NAMESERVER: ""
                  RFC2136_TIMEOUT: ""
                  RFC2136_TSIG_ALGORITHM: ""
                  RFC2136_TSIG_KEY: ""
                  RFC2136_TSIG_SECRET: ""
                route53:
                  AWS_ACCESS_KEY_ID: ""
                  AWS_REGION: ""
                  AWS_SECRET_ACCESS_KEY: ""
                vultr:
                  VULTR_API_KEY: ""
              domains:
                domainsList: null
                enabled: false
              email: admin@example.com
              enabled: false
              logging: false
              persistence:
                accessMode: ReadWriteOnce
                annotations: {}
                enabled: true
                size: 256Mi
              staging: true
            affinity: {}
            cpuLimit: 100m
            cpuRequest: 100m
            dashboard:
              auth: null
              domain: traefik.n5o.red
              enabled: true
              ingress: null
              service: null
              statistics: null
            debug:
              enabled: true
            deployment:
              hostPort:
                dashboardEnabled: false
                httpEnabled: false
                httpsEnabled: false
            deploymentStrategy: {}
            externalTrafficPolicy: Cluster
            gzip:
              enabled: true
            image: traefik
            imageTag: 1.7.4
            kubernetes:
              namespaces:
              - default
              - logging
              - kube-system
            loadBalancerIP: null
            loadBalancerSourceRanges: null
            memoryLimit: 512Mi
            memoryRequest: 128Mi
            metrics:
              datadog:
                enabled: false
              prometheus:
                buckets:
                - 0.1
                - 0.3
                - 0.5
                - 0.8
                - 1
                - 2
                - 5
                enabled: true
              statsd:
                enabled: false
            nodeSelector: {}
            podDisruptionBudget: {}
            proxyProtocol:
              enabled: false
              trustedIPs: null
            rbac:
              enabled: true
            replicas: 1
            sendAnonymousUsage: false
            service:
              annotations: null
              nodePorts:
                http: 80
                https: 443
            serviceType: NodePort
            ssl:
              defaultCert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUV3ekNDQXF1Z0F3SUJBZ0lKQUlwMW5PSStGTHdmTUEwR0NTcUdTSWIzRFFFQkN3VUFNQlF4RWpBUUJnTlYKQkFNTUNTb3VialZ2TG5KbFpEQWVGdzB4T0RFeU1USXhPREl5TkRKYUZ3MHlPREV5TURreE9ESXlOREphTUJReApFakFRQmdOVkJBTU1DU291YmpWdkxuSmxaRENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DCmdnSUJBTkVjV2YxQ2RONjlrY1V1NnR6a0JhbThLUlJmM0pWU3R4VlRDVGtYS2wrbmFxMG8vVmJtdDZkNURpbXIKeExpZUFxVS9yQXFCaUlpakFtMG9tMVBheFJKM3ZlR1pUTmxXankyazdGbXIxblZVYTBpZHJYMG1qTTVlT0EzdQowVjBhcE84bDVsVW15QWFNemJXakFZNFl0WGE1TVhTeVM2Z2wvTkVTNTA2bmVJS3RHR01tWGN2NURwdWY2NGZQCnNUODUrU0lkV1JNUDFObmx2azJtQmNRNVF4M1RiRVBCbTlFWE5LNHhNTjQ3ZlMxeHV4SDg2RXFueFRtRm9tWlkKbXhrTnJnR1AxNHFRSFJRWTRaRUdvRnNkZkh0cVp2cmFFWHM1dkpzRGJVQ3RYbnVSc2VmUnlLRnFFcnlWMFdrRwpHRHBJVkZ4aUhNLzhLSTc5QzhTaHhERmpJb0szMEh6QnJ6S2FMUVNRSGJnanVKSVpJbG9nRGtMNjRXaVhxb0wxClVBYy9rdDdjNHRWYzlubGhoT1hHN29BTlVDM0FpRXIzWWxNbHkwR1dMYXd3VmgvMjNrbElDR05XNUhPeHhsRHYKVkZvN0NzNEFoQi9LdFg5bzVZMTYvbEFVNWVSeHU5NmY3dTRubVlHQm1haDhhRG9HZHZ6UWhlMXptWWpNSzZzMgpRdWxhT3c0NENoaThzemdYUjBBYWFrSFBhRWxCeTdpRmdrT0pqSUJ2d1A1MFdhZWZCNmg3ZXZqR3psb0IwR3NIClY4WU8wZitGeXQ4Y0ZxZUJ5emR3SUo3RklxYmRsU1Nyc3JWS2ZPekVQeTBXOW42R21DL05uMmZhVVhiQmdwbTAKM0RwcWxtbTAwc1lDZkM4Yzg1SWovUm5zSmFtM2NUZFcvODZYTnpXSUlTdXVackl2QWdNQkFBR2pHREFXTUJRRwpBMVVkRVFRTk1BdUNDU291YmpWdkxuSmxaREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBTkdScHVQVjR0SVVLCnI4bks0NnYyUFVhMWVHa3Jsamg4dXUrajBWNjNZYXFOUFNFNnFVZkl5bU9YdDhucTk4dWVSb1I0VjBSMWVRUWwKQzBiejR1Q0lTaUtrTXYyRWEzMnhCRnZKTklYaG9NSTl6dVMzQ2JYSGpkZDNyeFN2Z0hsMG5QRnVNSHcrR1lnWQp4MGNFQ2dsbE4rbk8xUVVKdzBjNUpaS010YXB1dEowQkdHb1BGTUdFRVJUbDlIRlhuVXhWd1JYZzQwejhkLytyCnYyTlhIbUJ4YUoxMnQ2VlpXL0VzeFRsVUloTjcyQkdwOEdXRlpRZUFiZEhFMXVibFR3YXNQY0o0TUlHSzR0T24KdURPdlRWMmdBOUZRSzMzbTF4WWhubUVOaHBaT08yRkRMSzhGVDhaRnpKZ0tsZGNnY2RMN3l0ZFNiUTVtRkczYgpGWTk4VEY5MERXb2Urb2g2c1BhUnJkVjVoYWxmaVVFSTZUMjBISWJNdks1R1JLblJEMFRraDJDckhvaXR4bVlBClp1TVAvL2FlOXBhN1ljdkZvK1BZNHBDRytvOHpGeFlVclY0ZnkxQkM3dUh2eDFkOVhNMHBaK2FqK09iM0s2NXkKRGQ2MG5oU0dyeGQ0dXJqNlJFQzYvTmdtRGdJSFZJUUhoakJ0WGFXZ3FFZ0o1dWVmd3Y2YVRVUjBPVjNlaklINApmR0xncTA3QjY4L3ZOdVgrTHpLNXBId3JCWDZKcHF2dTlTRVpTb3Y5MWYvL3hBRFlDNld6S0p0TFh1NVQ0ZDlwCkRNeHErWmIwRDZZY29NemhLNlVISFBVWUdPL2RmRHJKNjdrUXpaaG1CQlNjZXowSHM4eDNTTHpxRkJSUHpyNXQKZUxHRFk2cjBIM3p6N2x1MFFXUWp1djd0R213RmFrST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
              defaultKey: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRRFJIRm45UW5UZXZaSEYKTHVyYzVBV3B2Q2tVWDl5VlVyY1ZVd2s1RnlwZnAycXRLUDFXNXJlbmVRNHBxOFM0bmdLbFA2d0tnWWlJb3dKdApLSnRUMnNVU2Q3M2htVXpaVm84dHBPeFpxOVoxVkd0SW5hMTlKb3pPWGpnTjd0RmRHcVR2SmVaVkpzZ0dqTTIxCm93R09HTFYydVRGMHNrdW9KZnpSRXVkT3AzaUNyUmhqSmwzTCtRNmJuK3VIejdFL09ma2lIVmtURDlUWjViNU4KcGdYRU9VTWQwMnhEd1p2UkZ6U3VNVERlTzMwdGNic1IvT2hLcDhVNWhhSm1XSnNaRGE0Qmo5ZUtrQjBVR09HUgpCcUJiSFh4N2FtYjYyaEY3T2J5YkEyMUFyVjU3a2JIbjBjaWhhaEs4bGRGcEJoZzZTRlJjWWh6UC9DaU8vUXZFCm9jUXhZeUtDdDlCOHdhOHltaTBFa0IyNEk3aVNHU0phSUE1Qyt1Rm9sNnFDOVZBSFA1TGUzT0xWWFBaNVlZVGwKeHU2QURWQXR3SWhLOTJKVEpjdEJsaTJzTUZZZjl0NUpTQWhqVnVSenNjWlE3MVJhT3dyT0FJUWZ5clYvYU9XTgpldjVRRk9Ya2NidmVuKzd1SjVtQmdabW9mR2c2Qm5iODBJWHRjNW1JekN1ck5rTHBXanNPT0FvWXZMTTRGMGRBCkdtcEJ6MmhKUWN1NGhZSkRpWXlBYjhEK2RGbW5ud2VvZTNyNHhzNWFBZEJyQjFmR0R0SC9oY3JmSEJhbmdjczMKY0NDZXhTS20zWlVrcTdLMVNuenN4RDh0RnZaK2hwZ3Z6WjluMmxGMndZS1p0Tnc2YXBacHROTEdBbnd2SFBPUwpJLzBaN0NXcHQzRTNWdi9PbHpjMWlDRXJybWF5THdJREFRQUJBb0lDQVFDOGJBeVdUVVNiMURzK2J5bElBdHNyCmQ1V1llMHg2N0w1Mkk0MUMrU0hBY1UySlhFN3krQS95Z3YwRkJYYk1WK3pRVkJCRW96V1EwVG1GZkxxQms3WlMKRHIxMVE3cGdlRU9wZ0Z0TDdhL2ZwMExJZXZQeHVrUFVURWU4SGo1ZTQzeE0xVnkzeTZzZlk4NlVaWjRvR1JHaQpPZnRiU0xFdGdaVk9HdmQ4QXlGdXRtUXNLMDBIVjVNWEhjR1FiZEFyeGFROFhpOStJcHpML3QwOGdHWGZ5eTB6CitlY3JJcEN4bG5Sc3BYeUFNeUIzUzJ5aUo3NTBUcnBETzZ2N0Jzb3lpQVlMK0QzaTZEcWJlbFArWnZjbFF1dUIKRlg1WGVSbVpiSXdMTGNwTEppemxzWUdaL29rSEVWcHl2WmlsUnMyYjdzSzlQOWJ3ZmlsWnRwL2MvVnFZbWRoawpTaDkwbncwREV4WTgyMHVuZFNTVG1TbmZFUDN1cnlTSFFkbzE0L1ZkVGU5L0wvZE9GTDJtcnh2YzBpR1ZUMkZtCml2RExpZXdrNmk2OEJJVlZ4UFRoYi9BMDdPSXU1am5SdVlVMGpuRE4vbGJNYWFPSi9DSGVtOFJHSExrYW93djQKUkkyd1dHNmFMNGdiZmNscS9KTm5MNWhvNzl5eVhxaCtlbGFKc0lxN2hma2lLRUR3bkp3a0I4N25YMVVZTjg4RwpPZmlrdHJaWFBsUXdHNTRXbFAxT1lZelJEaW9kNEMxVjIzYmJ4WWRCM2s0WVM5WTNkVklDQzlOclNXVGQ4Q1NFCjR6R3JWaEd6Mjk5QXlTblZKUkY5YVRtaG8wZHJXbmlXd3JtUUYvclVEcC9kWDh2Rk5ZOXhBNmlMZzdMcnFPT24KaTdjR0lzNlVEZVN2ZGNHbHlMY0wrUUtDQVFFQTZDWUNTTGFGQkJWWG5pcWRKUzEvbG4rZ3hjSWlrSHBFYVJ6bwpCbG1KcFp2K3BZQlpib01SbnhrbDFnWTM0a096MzhuQ1lRSE80azQrZ21zdEFnYko0RTZHMWh4L2I0OHRpeVlWCmE0NTZtMW1CYlMva1BVMEViMEhSYzljeWRsRjhYUXU2T1JPckpmOHlnZFJWR0FYRHJORkloOXoxQlNzR3dGYjUKcXBiN3VBVVRaN21MZ0Nyc1NmTG13WnBac3M2a3d0dG1LMElERkIwVWd3a2trNzBDTG1VWHZicWVkSGZoN1h4KwoxdW9LWmI4Q0hNMlZoMjFRbWdFc0Z6UFZHbnVwTSt2M0JhVHpURlVJKyt0cHkwMUJtYnB0eDAvYkZESkE5Ly9sCmp1dEs3bHdIdnFydTNKTG03S1RKNFZrbnpqT3h2SXI5MTVnRmQwMTI2ZkpxaHJJZjNRS0NBUUVBNXBobTltTVoKZ09vS1V6QVRRTEpScVNFUzAwRkpOV0FMQmcrM0lNMWhQVzdJcTZRWFZNZ2Z4YUthR1o3cHR5U0pRZC96WHR2aAppQm51eFVFTXZ3MG1tUmUyZmlaM2gydWtyMGY5elV4L2NlU3M0dU1FNGsyRWFncFAxMnNPMkVYVTYyd3JIdUswCjdXOUdLUXFPMzdoMVgvS3F4cHJJOXdiTnJDMVI2Y2FmbW5LOVlrTi8xSGxZajNvS3RSZFZaQnhaaENRMGxQcHIKQkluN0ZDMzhXR2lCcS9vcGN2cWhGaHJwMkpRYVFzVXhGajZ3ZG12dldRd3pHQTcxY0VwWW9RNkl5anlUNUpIawpRQ0dNak5FV3hiOVlTUVY0NVh3MktlVHNnRWtCSkRDcmVGZ2FvaXEvem5sYUVnejg1Vm9NWE1mcnR1bjZ2Q2laCkZlTWJKZ0U4OGtJL2V3S0NBUUIzOE10VlRoZkRXRk9BZ0h2WWJYMXlBRmJNVmRVTjJGM29BT3RQL0lyRmFhZFQKVXREaDdBMzZxVCtIS0lkTys3Ty9kN3BaN0ZrN1N6bTRvQzhNMFAwVVN2NFhPWG9ONVdlZWNQcTRLMURsV29VbwpLSW8vc2I4TXpIQ3U3UXhCWFRCbjBsdFFpZnp2RUw3RG5UU3B5TENrWlN5WUpXemlVcXlXUzFtSzdaNzRJSWM2CkcvOGJKUklYMHN1dVUxVHNzUjhuSGJ2WHRhOXBnT3pNRnJreks0QXBBRW9YMklkdG5WSzVKSTFUOUcrU3lmRUoKZUo0ODdobXF0OWhUMUkvUnN2cGt2UkZQZFQzT3ZsQjU5OU1kR3JrOTk3Z29OZlgycFZBejBaNkZETVFXQ3E1bApzR0xneTNWTDVvZjNTZHpyQ0lKWDYyZmpMOFFETTU2d21ISzVUT1p4QW9JQkFCallNTGU1STZWTkVnRzJlMHlNCktkbzBFd2dwejQ1dG82SnFqUXQrdFV4ZUpFYkI3aldYUGowWDhNeHozN0I0d2tVVHNPLzJkczBvSmg2Z2pKUUYKQWJTYTVuR2ZDVi9RekRTS2FDRDNiZi9DYUpJbGJZQklZOHpkQVk4dkhMRldqTU0wcTB5dmxsakNsV2VVbUtJbwpDSlZtMnRsOUVjdnpzck1yU3RrS0ttWUVtTHora3NZOHNMcjhwaXl1citlU1dsNnZXKzcxTUJTVUhUWW1ZanJRClA3QmN5cHgxdm1kWVRQdWxzVktpVmxDVVBvVHp5aHpwQUpSR0FGR3g0T3l4V1RHWTUwSklLYlJ6S09aL0hKbi8Kcks1cFpZWXNKTlhNc1dKOCt4K0FFdWxyYktzdU9lNHdDdkZJN3ZKekNrUHcwa2VwMi9icjFOcVQxbmY0eUMwOQowQU1DZ2dFQU1qT2V2OURhVTEyOWMwR1NhNlc4aTB4aW9SR1JORjd3OUZ6bzBUWm1oNE5RTzF2ZnYyanhEUGdCCmN0UHNOcUMyMlhBdVpVaHRuazgrcVV4WnZQMXpzUENsTCtLdWlGcVhaZlQ3ME9hNEJ0UGJJUUdYdFVING5yNzYKM3d2YjFaSXNvVU9UZ2FWMFhVVElTdGNINXNqNzNXbUxxOUpSbnpRVlkxdjRtbEF6alc3RVhRSng4MldueGtwLwpVeVgzYk1UTTlKUlNLOFZFNVJxcnJhZFZXaFBrTWpEZDdVUy9iUHVuZEI0Q2t3RFZIei9WdS9YTEx6YURMUWkzCmFKTm9DTUFaMVZDVkJOOE1oTnFmMnFJeWRRaXNwbWZCT2lmTWtvNDlJYVlXYWV6U2JpQVlTTFZLbENNL0Q2K0IKTyt6VWFJTTNSSkJydWc2dlNOb1c2d241Mlo2SlB3PT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
              enabled: true
              enforced: false
              insecureSkipVerify: true
            tolerations: []
            whiteListSourceRange: []
      valueOverrides: {}
    vault:
      name: vault
      namespace: default
      repo: ""
      branch: ""
      commit: ""
      version: 1.1.1
      syncedAt: 2018-12-30T15:37:05.958077302-05:00
      chart: helm.n5o.black/vault
      reportDeployment: false
      dependsOn:
      - traefik
      actions:
      - name: Test deploy
        when: AfterDeploy
        where: red,green
        maxAttempts: 5
        timeout: 5s
        interval: 5s
        test:
          http: https://vault.{{.Domain}}
      - name: Bootstrap vault
        when: AfterDeploy
        where: red,green
        exec: bosun vault bootstrap-dev
      - name: Configure vault/kube integration
        when: AfterDeploy
        vault:
          literal: |
            auth:
              kubernetes:
                type: kubernetes

            resources:
              /auth/kubernetes/config:
                comment: |
                  This wires up kubernetes authentication by pulling the kubernetes config values from
                  the cluster in ~/.kube/config.
                kubernetes_host: "{{ kube_server .Cluster }}"
                token_reviewer_jwt: "{{ kube_service_token .Cluster `vault-auth` }}"
                kubernetes_ca_cert: "{{ kube_ca_cert .Cluster | indent 6}}"

              /auth/kubernetes/role/devops:
                bound_service_account_names:
                  - devops
                bound_service_account_namespaces:
                  - "*"
                ttl: 60
                policies:
                  - admins
      values:
        blue:
          dynamic:
            features.devInstance: "false"
            features.serviceAccount: "true"
          static:
            domain: n5o.red
            features:
              devInstance: "false"
              serviceAccount: "true"
            image:
              name: docker.n5o.black/public/vault-dev-jose
              tag: latest
            replicaCount: 1
            storage: 4Gi
        green:
          dynamic:
            features.devInstance: "true"
            features.serviceAccount: "true"
            image.name: docker.n5o.black/public/vault-dev-jose
            image.tag: latest
            storage: 256Mi
          static:
            domain: n5o.red
            features:
              devInstance: "false"
              serviceAccount: "true"
            image:
              name: docker.n5o.black/public/vault-dev-jose
              tag: latest
            replicaCount: 1
            storage: 4Gi
        red:
          dynamic:
            features.devInstance: "true"
            features.serviceAccount: "true"
            image.name: docker.n5o.black/public/vault-dev-jose
            image.tag: latest
            storage: 256Mi
          static:
            domain: n5o.red
            features:
              devInstance: "false"
              serviceAccount: "true"
            image:
              name: docker.n5o.black/public/vault-dev-jose
              tag: latest
            replicaCount: 1
            storage: 4Gi
      valueOverrides: {}
    zookeeper:
      name: zookeeper
      namespace: default
      repo: ""
      branch: ""
      commit: ""
      version: 1.1.2
      syncedAt: 2018-12-30T15:37:06.048283231-05:00
      chart: helm.n5o.black/zookeeper
      reportDeployment: false
      dependsOn: []
      actions: []
      values:
        blue:
          dynamic:
            image.name: docker.n5o.black/public/zookeeper
            image.tag: latest
          static:
            affinity: {}
            color: red
            env:
              JMXAUTH: "false"
              JMXDISABLE: "false"
              JMXPORT: 1099
              JMXSSL: "false"
              ZK_CLIENT_PORT: 2181
              ZK_ELECTION_PORT: 3888
              ZK_HEAP_SIZE: 2G
              ZK_INIT_LIMIT: 5
              ZK_LOG_LEVEL: INFO
              ZK_MAX_CLIENT_CNXNS: 60
              ZK_MAX_SESSION_TIMEOUT: 40000
              ZK_MIN_SESSION_TIMEOUT: 4000
              ZK_PURGE_INTERVAL: 0
              ZK_SERVER_PORT: 2888
              ZK_SNAP_RETAIN_COUNT: 3
              ZK_SYNC_LIMIT: 10
              ZK_TICK_TIME: 2000
            env.ZK_HEAP_SIZE: 1536M
            exporters:
              jmx:
                config:
                  lowercaseOutputName: false
                  rules:
                  - name: zookeeper_$2
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+)><>(\w+)
                  - labels:
                      replicaId: $2
                    name: zookeeper_$3
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+)><>(\w+)
                  - labels:
                      memberType: $3
                      replicaId: $2
                    name: zookeeper_$4
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+), name2=(\w+)><>(\w+)
                  - labels:
                      memberType: $3
                      replicaId: $2
                    name: zookeeper_$4_$5
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+), name2=(\w+), name3=(\w+)><>(\w+)
                  startDelaySeconds: 30
                enabled: true
                env: {}
                image:
                  pullPolicy: IfNotPresent
                  repository: sscaling/jmx-prometheus-exporter
                  tag: 0.3.0
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: jmxxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                path: /metrics
                ports:
                  jmxxp:
                    containerPort: 9404
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: jmxxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                resources: {}
              zookeeper:
                config:
                  logLevel: info
                  resetOnScrape: "true"
                enabled: true
                env: {}
                image:
                  pullPolicy: IfNotPresent
                  repository: josdotso/zookeeper-exporter
                  tag: v1.1.2
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: zookeeperxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                path: /metrics
                ports:
                  zookeeperxp:
                    containerPort: 9141
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: zookeeperxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                resources: {}
            fullNameOverride: zookeeper
            headless:
              annotations: {}
            image:
              name: docker.n5o.black/public/zookeeper
              pullPolicy: Always
              pullSecret: docker-n5o-black
              tag: latest
            jobs:
              chroots:
                activeDeadlineSeconds: 300
                backoffLimit: 5
                completions: 1
                config:
                  create: []
                enabled: false
                env: []
                parallelism: 1
                resources: {}
                restartPolicy: Never
            livenessProbe:
              exec:
                command:
                - zkOk.sh
              initialDelaySeconds: 20
            nodeSelector: {}
            persistence:
              accessMode: ReadWriteOnce
              enabled: true
              size: 5Gi
              storageClass: ssd
            podAnnotations: {}
            podDisruptionBudget:
              maxUnavailable: 1
            podLabels: {}
            ports:
              client:
                containerPort: 2181
                protocol: TCP
              election:
                containerPort: 3888
                protocol: TCP
              server:
                containerPort: 2888
                protocol: TCP
            priorityClassName: ""
            project: red
            readinessProbe:
              exec:
                command:
                - zkOk.sh
              initialDelaySeconds: 20
            replicaCount: 3
            resources:
              limits:
                memory: 2Gi
              requests:
                memory: 1Gi
            securityContext:
              fsGroup: 1000
              runAsUser: 1000
            service:
              annotations: {}
              ports:
                client:
                  port: 2181
                  protocol: TCP
                  targetPort: client
              type: ClusterIP
            terminationGracePeriodSeconds: 1800
            tolerations: []
            updateStrategy:
              type: OnDelete
        green:
          dynamic:
            image.name: docker.n5o.black/public/zookeeper
            image.tag: latest
          static:
            affinity: {}
            color: red
            env:
              JMXAUTH: "false"
              JMXDISABLE: "false"
              JMXPORT: 1099
              JMXSSL: "false"
              ZK_CLIENT_PORT: 2181
              ZK_ELECTION_PORT: 3888
              ZK_HEAP_SIZE: 2G
              ZK_INIT_LIMIT: 5
              ZK_LOG_LEVEL: INFO
              ZK_MAX_CLIENT_CNXNS: 60
              ZK_MAX_SESSION_TIMEOUT: 40000
              ZK_MIN_SESSION_TIMEOUT: 4000
              ZK_PURGE_INTERVAL: 0
              ZK_SERVER_PORT: 2888
              ZK_SNAP_RETAIN_COUNT: 3
              ZK_SYNC_LIMIT: 10
              ZK_TICK_TIME: 2000
            env.ZK_HEAP_SIZE: 800M
            exporters:
              jmx:
                config:
                  lowercaseOutputName: false
                  rules:
                  - name: zookeeper_$2
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+)><>(\w+)
                  - labels:
                      replicaId: $2
                    name: zookeeper_$3
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+)><>(\w+)
                  - labels:
                      memberType: $3
                      replicaId: $2
                    name: zookeeper_$4
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+), name2=(\w+)><>(\w+)
                  - labels:
                      memberType: $3
                      replicaId: $2
                    name: zookeeper_$4_$5
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+), name2=(\w+), name3=(\w+)><>(\w+)
                  startDelaySeconds: 30
                enabled: true
                env: {}
                image:
                  pullPolicy: IfNotPresent
                  repository: sscaling/jmx-prometheus-exporter
                  tag: 0.3.0
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: jmxxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                path: /metrics
                ports:
                  jmxxp:
                    containerPort: 9404
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: jmxxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                resources: {}
              zookeeper:
                config:
                  logLevel: info
                  resetOnScrape: "true"
                enabled: true
                env: {}
                image:
                  pullPolicy: IfNotPresent
                  repository: josdotso/zookeeper-exporter
                  tag: v1.1.2
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: zookeeperxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                path: /metrics
                ports:
                  zookeeperxp:
                    containerPort: 9141
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: zookeeperxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                resources: {}
            fullNameOverride: zookeeper
            headless:
              annotations: {}
            image:
              name: docker.n5o.black/public/zookeeper
              pullPolicy: Always
              pullSecret: docker-n5o-black
              tag: latest
            jobs:
              chroots:
                activeDeadlineSeconds: 300
                backoffLimit: 5
                completions: 1
                config:
                  create: []
                enabled: false
                env: []
                parallelism: 1
                resources: {}
                restartPolicy: Never
            livenessProbe:
              exec:
                command:
                - zkOk.sh
              initialDelaySeconds: 20
            nodeSelector: {}
            persistence:
              accessMode: ReadWriteOnce
              enabled: true
              size: 5Gi
              storageClass: ssd
            podAnnotations: {}
            podDisruptionBudget:
              maxUnavailable: 1
            podLabels: {}
            ports:
              client:
                containerPort: 2181
                protocol: TCP
              election:
                containerPort: 3888
                protocol: TCP
              server:
                containerPort: 2888
                protocol: TCP
            priorityClassName: ""
            project: red
            readinessProbe:
              exec:
                command:
                - zkOk.sh
              initialDelaySeconds: 20
            replicaCount: 3
            resources:
              limits:
                memory: 1Gi
              requests:
                memory: 1Gi
            securityContext:
              fsGroup: 1000
              runAsUser: 1000
            service:
              annotations: {}
              ports:
                client:
                  port: 2181
                  protocol: TCP
                  targetPort: client
              type: ClusterIP
            terminationGracePeriodSeconds: 1800
            tolerations: []
            updateStrategy:
              type: OnDelete
        red:
          dynamic:
            image.name: docker.n5o.black/public/zookeeper
            image.tag: latest
          static:
            affinity: {}
            color: red
            env:
              JMXAUTH: "false"
              JMXDISABLE: "false"
              JMXPORT: 1099
              JMXSSL: "false"
              ZK_CLIENT_PORT: 2181
              ZK_ELECTION_PORT: 3888
              ZK_HEAP_SIZE: 2G
              ZK_INIT_LIMIT: 5
              ZK_LOG_LEVEL: INFO
              ZK_MAX_CLIENT_CNXNS: 60
              ZK_MAX_SESSION_TIMEOUT: 40000
              ZK_MIN_SESSION_TIMEOUT: 4000
              ZK_PURGE_INTERVAL: 0
              ZK_SERVER_PORT: 2888
              ZK_SNAP_RETAIN_COUNT: 3
              ZK_SYNC_LIMIT: 10
              ZK_TICK_TIME: 2000
            env.ZK_HEAP_SIZE: 500M
            exporters:
              jmx:
                config:
                  lowercaseOutputName: false
                  rules:
                  - name: zookeeper_$2
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+)><>(\w+)
                  - labels:
                      replicaId: $2
                    name: zookeeper_$3
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+)><>(\w+)
                  - labels:
                      memberType: $3
                      replicaId: $2
                    name: zookeeper_$4
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+), name2=(\w+)><>(\w+)
                  - labels:
                      memberType: $3
                      replicaId: $2
                    name: zookeeper_$4_$5
                    pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                      name1=replica.(\d+), name2=(\w+), name3=(\w+)><>(\w+)
                  startDelaySeconds: 30
                enabled: true
                env: {}
                image:
                  pullPolicy: IfNotPresent
                  repository: sscaling/jmx-prometheus-exporter
                  tag: 0.3.0
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: jmxxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                path: /metrics
                ports:
                  jmxxp:
                    containerPort: 9404
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: jmxxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                resources: {}
              zookeeper:
                config:
                  logLevel: info
                  resetOnScrape: "true"
                enabled: true
                env: {}
                image:
                  pullPolicy: IfNotPresent
                  repository: josdotso/zookeeper-exporter
                  tag: v1.1.2
                livenessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: zookeeperxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                path: /metrics
                ports:
                  zookeeperxp:
                    containerPort: 9141
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 8
                  httpGet:
                    path: /metrics
                    port: zookeeperxp
                  initialDelaySeconds: 30
                  periodSeconds: 15
                  successThreshold: 1
                  timeoutSeconds: 60
                resources: {}
            fullNameOverride: zookeeper
            headless:
              annotations: {}
            image:
              name: docker.n5o.black/public/zookeeper
              pullPolicy: Always
              pullSecret: docker-n5o-black
              tag: latest
            jobs:
              chroots:
                activeDeadlineSeconds: 300
                backoffLimit: 5
                completions: 1
                config:
                  create: []
                enabled: false
                env: []
                parallelism: 1
                resources: {}
                restartPolicy: Never
            livenessProbe:
              exec:
                command:
                - zkOk.sh
              initialDelaySeconds: 20
            nodeSelector: {}
            persistence:
              accessMode: ReadWriteOnce
              enabled: true
              size: 5Gi
              storageClass: ssd
            podAnnotations: {}
            podDisruptionBudget:
              maxUnavailable: 1
            podLabels: {}
            ports:
              client:
                containerPort: 2181
                protocol: TCP
              election:
                containerPort: 3888
                protocol: TCP
              server:
                containerPort: 2888
                protocol: TCP
            priorityClassName: ""
            project: red
            readinessProbe:
              exec:
                command:
                - zkOk.sh
              initialDelaySeconds: 20
            replicaCount: 1
            resources:
              limits:
                memory: 512Mi
              requests:
                memory: 256Mi
            securityContext:
              fsGroup: 1000
              runAsUser: 1000
            service:
              annotations: {}
              ports:
                client:
                  port: 2181
                  protocol: TCP
                  targetPort: client
              type: ClusterIP
            terminationGracePeriodSeconds: 1800
            tolerations: []
            updateStrategy:
              type: OnDelete
      valueOverrides: {}

